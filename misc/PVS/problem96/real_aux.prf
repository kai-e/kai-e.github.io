(|real_aux|
 (|e15_16_1| 0
  (|e15_16_1-1| |nil| 3886974872
   ("" (SKOLEM-TYPEPRED)
    (("" (GROUND)
      (("" (LEMMA "product_rest")
        (("" (INST -1 "A!1" "n_f(f!1)") (("" (GRIND) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|finite_rest| APPLICATION-JUDGEMENT "finite_set[T]" |real_aux| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|n_f| CONST-DECL "real" |real_aux| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|finite_remove| APPLICATION-JUDGEMENT "finite_set[T]" |real_aux| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|rest| CONST-DECL "set" |sets| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|product_rest| FORMULA-DECL NIL |finite_sets_product| |finite_sets|)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (D FORMAL-NONEMPTY-TYPE-DECL NIL |real_aux| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|e15_16_2_TCC1| 0
  (|e15_16_2_TCC1-1| NIL 3888781126
   ("" (LEMMA "finite_universe")
    (("" (SKOLEM-TYPEPRED)
      (("" (GROUND)
        (("" (SKOLEM-TYPEPRED)
          (("" (LEMMA "finite_subset[D]")
            (("" (INST -1 "fullset[D]" "x!1")
              (("1" (GROUND)
                (("1" (HIDE -1 -3 2)
                  (("1" (EXPAND "subset?") (("1" (GRIND) NIL NIL)) NIL)) NIL))
                NIL)
               ("2" (HIDE -1 -3 2) (("2" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (D FORMAL-NONEMPTY-TYPE-DECL NIL |real_aux| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|is_finite_type| CONST-DECL "bool" |finite_sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[D]])"
     |real_aux| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)
    (|finite_universe| FORMULA-DECL NIL |real_aux| NIL))
   NIL
   (|e15_16_2| SUBTYPE
    "LAMBDA B: number_fields.*(exponentiation.^((-1), (finite_sets[real_aux.D].card(real_aux.B))), finite_sets_product[real_aux.D, real, 1, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*)].product(real_aux.B, real_aux.f))"
    "[set[D] -> real]")))
 (|e15_16_2| 0
  (|e15_16_2-1| |nil| 3886975279
   ("" (SKOLEM-TYPEPRED)
    (("" (GROUND)
      (("" (LEMMA "sum_mult")
        ((""
          (INST -1 "powerset(rest(A!1))" "f!1(choose(A!1))"
           "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)")
          (("1" (REPLACE -1 * RL T)
            (("1" (LEMMA "sum_eq_funs")
              (("1"
                (INST -1 "powerset(rest(A!1))" "LAMBDA (t: set[D]):
            f!1(choose(A!1)) * ((-1) ^ (card(t)) * product(t, f!1))"
                 "LAMBDA B: f!1(choose(A!1)) * (-1) ^ (card(B)) * product(B, f!1)")
                (("1" (GROUND) NIL NIL)
                 ("2" (HIDE - 2)
                  (("2" (LEMMA "finite_universe")
                    (("2" (SKOLEM-TYPEPRED)
                      (("2" (LEMMA "finite_subset[D]")
                        (("2" (INST -1 "fullset[D]" "t!1")
                          (("1" (GROUND)
                            (("1" (EXPAND "subset?") (("1" (GRIND) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE - 2)
            (("2" (SKOLEM-TYPEPRED)
              (("2" (LEMMA "finite_universe")
                (("2" (LEMMA "finite_subset[D]" ("A" "fullset[D]" "s" "x!1"))
                  (("1" (GRIND) NIL NIL)
                   ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|powerset_finite| APPLICATION-JUDGEMENT "finite_set[set[T]]"
     |finite_sets_of_sets| NIL)
    (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[D]])" |real_aux|
     NIL)
    (|powerset_finite3| APPLICATION-JUDGEMENT
     "non_empty_finite_set[finite_set[D]]" |real_aux| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|finite_rest| APPLICATION-JUDGEMENT "finite_set[T]" |real_aux| NIL)
    (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|product| DEF-DECL "R" |finite_sets_product| |finite_sets|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|rest| CONST-DECL "set" |sets| NIL)
    (|powerset| CONST-DECL "setofsets" |sets| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|sum_eq_funs| FORMULA-DECL NIL |finite_sets_sum_real| |finite_sets|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|is_finite_type| CONST-DECL "bool" |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[D]])"
     |real_aux| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)
    (|finite_universe| FORMULA-DECL NIL |real_aux| NIL)
    (|sum_mult| FORMULA-DECL NIL |finite_sets_sum_real| |finite_sets|)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (D FORMAL-NONEMPTY-TYPE-DECL NIL |real_aux| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|e15_16_3| 0
  (|e15_16_3-1| |nil| 3886975712
   ("" (SKOLEM-TYPEPRED)
    (("" (LEMMA "sum_mult")
      (("" (INST?)
        (("1" (INST -1 "-1")
          (("1" (GROUND)
            (("1" (BOTH-SIDES "*" "-1" -1)
              (("1" (GROUND)
                (("1" (REPLACE -1 * RL)
                  (("1"
                    (CASE
                        "(LAMBDA (t: finite_set[D]): -1 * (f!1(choose(A!1)) * (-1) ^ (card(t)) * product(t, f!1))) = LAMBDA (t: finite_set[D]): (f!1(choose(A!1)) * (-1) ^ (1 + card(t)) * product(t, f!1))")
                    (("1" (REPLACE -1 * RL T)
                      (("1" (REPLACE -1 * LR T)
                        (("1"
                          (LEMMA "sum_mult"
                           ("S" "powerset(rest(A!1))" "c" "-1" "f"
                            "LAMBDA (t: finite_set[D]):
              f!1(choose(A!1)) * (-1) ^ (card(t)) * product(t, f!1)"))
                          (("1" (REPLACE -1 * RL T)
                            (("1" (BETA 1)
                              (("1" (GROUND)
                                (("1"
                                  (LEMMA "sum_eq_funs"
                                   ("S" "powerset(rest(A!1))" "f"
                                    "LAMBDA (t: finite_set[D]):
              -1 * (f!1(choose(A!1)) * (-1) ^ (card(t)) * product(t, f!1))"
                                    "g" "LAMBDA (t_1: set[D]):
            -1 *
             (f!1(choose(A!1)) * (-1) ^ (card(t_1)) * product(t_1, f!1))"))
                                  (("1" (GROUND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE - 2)
                            (("2" (SKOLEM-TYPEPRED)
                              (("2" (LEMMA "finite_universe")
                                (("2"
                                  (LEMMA "finite_subset[D]"
                                   ("A" "fullset[D]" "s" "x!1"))
                                  (("1" (EXPAND "subset?")
                                    (("1" (PROP) (("1" (GRIND) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (DELETE -1 2)
                      (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T)
                        (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE - 2)
                (("2" (LEMMA "finite_universe")
                  (("2" (SKOLEM-TYPEPRED)
                    (("2"
                      (LEMMA "finite_subset[D]" ("A" "fullset[D]" "s" "t!1"))
                      (("1" (PROP)
                        (("1" (EXPAND "subset?") (("1" (GRIND) NIL NIL)) NIL))
                        NIL)
                       ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE - 2)
          (("2" (SKOLEM-TYPEPRED)
            (("2" (LEMMA "finite_universe")
              (("2" (LEMMA "finite_subset[D]" ("A" "fullset[D]" "s" "x!1"))
                (("1" (EXPAND "subset?")
                  (("1" (PROP) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                 ("2" (GRIND) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (GROUND) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (D FORMAL-NONEMPTY-TYPE-DECL NIL |real_aux| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|powerset_finite| APPLICATION-JUDGEMENT "finite_set[set[T]]"
     |finite_sets_of_sets| NIL)
    (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[D]])" |real_aux|
     NIL)
    (|powerset_finite3| APPLICATION-JUDGEMENT
     "non_empty_finite_set[finite_set[D]]" |real_aux| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|powerset| CONST-DECL "setofsets" |sets| NIL)
    (|rest| CONST-DECL "set" |sets| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|product| DEF-DECL "R" |finite_sets_product| |finite_sets|)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (A!1 SKOLEM-CONST-DECL "finite_set[D]" |real_aux| NIL)
    (|finite_rest| APPLICATION-JUDGEMENT "finite_set[T]" |real_aux| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|is_finite_type| CONST-DECL "bool" |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|finite_universe| FORMULA-DECL NIL |real_aux| NIL)
    (|sum_eq_funs| FORMULA-DECL NIL |finite_sets_sum_real| |finite_sets|)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|odd?| CONST-DECL "bool" |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sum| DEF-DECL "R" |finite_sets_sum| |finite_sets|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sum_mult| FORMULA-DECL NIL |finite_sets_sum_real| |finite_sets|))
   SHOSTAK))
 (|e15_16_4| 0
  (|e15_16_4-1| |nil| 3887052389
   ("" (SKOLEM-TYPEPRED)
    (("" (GROUND)
      (("" (LEMMA "sum_f_g")
        (("" (INST?)
          (("1" (GROUND)
            (("1" (SKOLEM-TYPEPRED)
              (("1" (DELETE 2)
                (("1" (EXPAND "o")
                  (("1" (LEMMA "product_add")
                    (("1" (INST?)
                      (("1" (REPLACE -1 * LR)
                        (("1" (DELETE -1)
                          (("1" (LEMMA "choose_not_member[D]")
                            (("1" (EXPAND "powerset")
                              (("1" (EXPAND "subset?")
                                (("1" (INST? -1)
                                  (("1" (INST?)
                                    (("1" (GROUND)
                                      (("1" (LEMMA "card_add[D]")
                                        (("1" (GRIND) NIL NIL)) NIL)
                                       ("2" (GRIND) NIL NIL)
                                       ("3" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE - 2)
            (("2" (SKOLEM-TYPEPRED)
              (("2" (LEMMA "finite_universe")
                (("2" (LEMMA "finite_subset[D]" ("A" "fullset[D]" "s" "x!1"))
                  (("1" (EXPAND "subset?")
                    (("1" (PROP) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                   ("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (D FORMAL-NONEMPTY-TYPE-DECL NIL |real_aux| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|sum_f_g| FORMULA-DECL NIL |finite_sets_sum| |finite_sets|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)
    (|is_finite_type| CONST-DECL "bool" |finite_sets| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finite_universe| FORMULA-DECL NIL |real_aux| NIL)
    (|product_add| FORMULA-DECL NIL |finite_sets_product| |finite_sets|)
    (|choose_not_member| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|card_add| FORMULA-DECL NIL |finite_sets| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|finite_remove| APPLICATION-JUDGEMENT "finite_set[T]" |real_aux| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (O CONST-DECL "T3" |function_props| NIL)
    (|product| DEF-DECL "R" |finite_sets_product| |finite_sets|)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rest| CONST-DECL "set" |sets| NIL)
    (|powerset| CONST-DECL "setofsets" |sets| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set[D]"
     |real_aux| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|finite_rest| APPLICATION-JUDGEMENT "finite_set[T]" |real_aux| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|powerset_finite3| APPLICATION-JUDGEMENT
     "non_empty_finite_set[finite_set[D]]" |real_aux| NIL)
    (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[D]])" |real_aux|
     NIL)
    (|powerset_finite| APPLICATION-JUDGEMENT "finite_set[set[T]]"
     |finite_sets_of_sets| NIL))
   SHOSTAK))
 (|e15_16_5| 0
  (|e15_16_5-2| "" 3888274950
   ("" (SKOLEM-TYPEPRED)
    (("" (GROUND)
      (("" (LEMMA "finite_universe")
        (("" (LEMMA "finite_subset[D]")
          (("" (EXPAND "subset?" -1)
            ((""
              (LEMMA "sum_map_dom[set[D],set[D]]"
               ("X" "powerset(rest(A!1))" "f"
                "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)" "g"
                "LAMBDA B: add(choose(A!1), B)"))
              (("1" (GROUND)
                (("1" (POSTPONE) NIL NIL)
                 ("2" (HIDE 2)
                  (("2" (EXPAND "injective?")
                    (("2" (SKOLEM-TYPEPRED)
                      (("2" (EXPAND "restrict")
                        (("2" (EXPAND "powerset")
                          (("2" (EXPAND "add")
                            (("2" (GROUND)
                              (("2" (DECOMPOSE-EQUALITY -3)
                                (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T)
                                  (("2" (INST?)
                                    (("2" (GROUND)
                                      (("2" (EXPAND "member")
                                        (("2" (CASE "choose(A!1) = x!1")
                                          (("1" (EXPAND "rest")
                                            (("1" (EXPAND "subset?")
                                              (("1" (INST?)
                                                (("1" (INST?)
                                                  (("1" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (EXPAND "subset?")
                                            (("2" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE -3 -4 2)
                (("2" (SKOLEM-TYPEPRED)
                  (("2" (INST -1 "fullset" "x!1")
                    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|e15_16_5-1| |nil| 3887053296
   ("" (SKOLEM-TYPEPRED)
    (("" (GROUND)
      (("" (LEMMA "sum_map_dom")
        (("" (INST?)
          (("" (GROUND)
            (("1" (REPLACE -1 * LR)
              (("1" (HIDE -1)
                (("1" (EXPAND "image")
                  (("1"
                    (CASE "{y: finite_set[D] |
             EXISTS (x: (powerset(rest(A!1)))): y = add(choose(A!1), x)} = {y: (nonempty?[D]) |
              EXISTS (x: (powerset(rest(A!1)))): y = add(choose(A!1), x)}")
                    (("1" (REPLACE -1 * LR T) (("1" (PROPAX) NIL NIL)) NIL)
                     ("2" (HIDE 2) (("2" (POSTPONE) NIL NIL)) NIL)
                     ("3" (POSTPONE) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (EXPAND "injective?")
                (("2" (SKOLEM-TYPEPRED)
                  (("2" (GROUND)
                    (("2" (EXPAND "restrict")
                      (("2" (EXPAND "add")
                        (("2" (GROUND)
                          (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T)
                            (("2" (IFF)
                              (("2" (EXPAND "powerset")
                                (("2" (EXPAND "subset?")
                                  (("2" (INST?)
                                    (("2" (INST?)
                                      (("2" (EXPAND "member")
                                        (("2" (EXPAND "rest")
                                          (("2" (EXPAND "nonempty?")
                                            (("2" (REPLACE 2 * LR)
                                              (("2" (EXPAND "remove")
                                                (("2" (DECOMPOSE-EQUALITY -3)
                                                  (("2" (INST?)
                                                    (("2" (GROUND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|e15_16_6| 0
  (|e15_16_6-2| "" 3888280935
   ("" (SKOLEM-TYPEPRED)
    (("" (PROP)
      (("" (LEMMA "sum_disj_union")
        (("" (LEMMA "powerset_rew")
          (("" (INST?)
            (("" (INST?)
              (("" (REPLACE -1 1 RL T)
                (("" (LEMMA "sum_eq_doms")
                  (("" (INST?)
                    (("1" (GROUND)
                      (("1"
                        (INST -2
                         "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)")
                        (("1" (GROUND)
                          (("1" (REPLACE -1 * LR T)
                            (("1"
                              (BOTH-SIDES "-" "sum(powerset(rest(A!1)),
            LAMBDA B: (-1) ^ (card(B)) * product(B, f!1))"
                               1)
                              (("1" (GROUND)
                                (("1"
                                  (LEMMA "sum_eq_doms"
                                   ("A"
                                    "extend[set[D], (nonempty?[D]), bool, FALSE]
              (image(LAMBDA B: add(choose(A!1), B), powerset(rest(A!1))))"
                                    "B"
                                    "extend[setof[D], (nonempty?[D]), bool, FALSE]
               (image(LAMBDA (G: set[D]): add(choose(A!1), G),
                      powerset(rest(A!1))))"
                                    "f"
                                    "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)"))
                                  (("1" (GROUND)
                                    (("1" (HIDE -1 2)
                                      (("1" (EXPAND "extend")
                                        (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T)
                                          (("1" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE - 2)
                                    (("2" (SKOLEM-TYPEPRED)
                                      (("2" (LEMMA "finite_universe")
                                        (("2"
                                          (LEMMA "finite_subset[D]"
                                           ("A" "fullset[D]" "s" "x!1"))
                                          (("1" (EXPAND "subset?")
                                            (("1" (PROP)
                                              (("1" (GRIND) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (GRIND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE - 2)
                                (("2" (SKOLEM-TYPEPRED)
                                  (("2" (LEMMA "finite_universe")
                                    (("2"
                                      (LEMMA "finite_subset[D]"
                                       ("A" "fullset[D]" "s" "x!1"))
                                      (("1" (EXPAND "subset?")
                                        (("1" (PROP) (("1" (GRIND) NIL NIL))
                                          NIL))
                                        NIL)
                                       ("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE -1 2)
                            (("2" (EXPAND "disjoint?")
                              (("2" (EXPAND "intersection")
                                (("2" (EXPAND "empty?")
                                  (("2" (SKOLEM-TYPEPRED)
                                    (("2" (EXPAND "member")
                                      (("2" (EXPAND "powerset")
                                        (("2" (EXPAND "subset?")
                                          (("2" (GROUND)
                                            (("2" (EXPAND "extend")
                                              (("2" (GROUND)
                                                (("2" (EXPAND "image")
                                                  (("2" (SKOLEM-TYPEPRED)
                                                    (("2"
                                                      (INST -4 "choose(A!1)")
                                                      (("2" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE - 2)
                          (("2" (SKOLEM-TYPEPRED)
                            (("2" (LEMMA "finite_universe")
                              (("2"
                                (LEMMA "finite_subset[D]"
                                 ("A" "fullset[D]" "s" "x!1"))
                                (("1" (EXPAND "subset?")
                                  (("1" (PROP) (("1" (GRIND) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (GRIND) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE - 2)
                      (("2" (SKOLEM-TYPEPRED)
                        (("2" (LEMMA "finite_universe")
                          (("2"
                            (LEMMA "finite_subset[D]"
                             ("A" "fullset[D]" "s" "x!1"))
                            (("1" (EXPAND "subset?")
                              (("1" (PROP) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                             ("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (D FORMAL-NONEMPTY-TYPE-DECL NIL |real_aux| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|sum_disj_union| FORMULA-DECL NIL |finite_sets_sum| |finite_sets|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (A!1 SKOLEM-CONST-DECL "finite_set[D]" |real_aux| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|product| DEF-DECL "R" |finite_sets_product| |finite_sets|)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|finite_intersection2| APPLICATION-JUDGEMENT "finite_set[set[D]]"
     |real_aux| NIL)
    (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|is_finite_type| CONST-DECL "bool" |finite_sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|finite_universe| FORMULA-DECL NIL |real_aux| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|finite_remove| APPLICATION-JUDGEMENT "finite_set[T]" |real_aux| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|sum| DEF-DECL "R" |finite_sets_sum| |finite_sets|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set[set[D]]" |real_aux| NIL)
    (|nonempty_union1| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set[D]"
     |real_aux| NIL)
    (|finite_image| APPLICATION-JUDGEMENT "finite_set[R]" |function_image_aux|
     NIL)
    (|finite_rest| APPLICATION-JUDGEMENT "finite_set[T]" |real_aux| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sum_eq_doms| FORMULA-DECL NIL |finite_sum_aux2| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|image| CONST-DECL "set[R]" |function_image| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|rest| CONST-DECL "set" |sets| NIL)
    (|powerset| CONST-DECL "setofsets" |sets| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|powerset_finite| APPLICATION-JUDGEMENT "finite_set[set[T]]"
     |finite_sets_of_sets| NIL)
    (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[D]])" |real_aux|
     NIL)
    (|powerset_finite3| APPLICATION-JUDGEMENT
     "non_empty_finite_set[finite_set[D]]" |real_aux| NIL)
    (|finite_extend| APPLICATION-JUDGEMENT "finite_set[T]" |extend_set_props|
     NIL)
    (|powerset_rew| FORMULA-DECL NIL |powerset_aux| NIL))
   SHOSTAK)
  (|e15_16_6-1| |nil| 3887064400
   ("" (SKOLEM-TYPEPRED)
    (("" (PROP)
      (("" (LEMMA "sum_disj_union")
        (("" (LEMMA "powerset_rew")
          (("" (INST?)
            (("" (INST?)
              (("" (REPLACE -1 1 RL T)
                (("" (PROP)
                  (("1" (REPLACE -1 1 RL T)
                    (("1"
                      (CASE
                          "image (LAMBDA B: add(choose(A!1), B), sets[D].powerset(sets[D].rest(A!1))) =
                 extend[setof[D], (nonempty?[D]), bool, FALSE]
            (image (LAMBDA (G: sets[D].set):
                              add(choose(A!1), G), sets[D].powerset(sets[D].rest(A!1))))")
                      (("1" (REPLACE -1 1 LR T)
                        (("1"
                          (CASE "restrict[setof[D], (nonempty?[D]), bool]
                    (extend[setof[D], (nonempty?[D]), bool, FALSE]
                         (image(LAMBDA (G: sets[D].set):
                                  add(choose(A!1), G),
                                sets[D].powerset(sets[D].rest(A!1))))) = image(LAMBDA (G: set[D]): add(choose(A!1), G), powerset(rest(A!1)))")
                          (("1" (REPLACE -1 1 LR T)
                            (("1" (EXPAND "extend")
                              (("1" (EXPAND "image")
                                (("1"
                                  (CASE "{y: (nonempty?[D]) |
                   EXISTS (x: (powerset(rest(A!1)))):
                     y = add(choose(A!1), x)} = LAMBDA (t: setof[D]):
                   IF (nonempty?[D])(t)
                     THEN EXISTS (x: (powerset(rest(A!1)))):
                            t = add(choose(A!1), x)
                   ELSE FALSE
                   ENDIF")
                                  (("1" (REPLACE -1 1 LR T)
                                    (("1" (EXPAND "restrict")
                                      (("1" (POSTPONE) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2" (EXPAND "restrict")
                                      (("2" (PROPAX) NIL NIL)) NIL))
                                    NIL)
                                   ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)
                                   ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE 2)
                            (("2" (EXPAND "restrict")
                              (("2" (EXPAND "extend")
                                (("2" (EXPAND "image") (("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (EXPAND "restrict")
                          (("2" (EXPAND "extend")
                            (("2" (EXPAND "image") (("2" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (PROPAX) NIL NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 2)
                    (("2" (EXPAND "disjoint?")
                      (("2" (EXPAND "intersection")
                        (("2" (EXPAND "empty?")
                          (("2" (SKOLEM-TYPEPRED)
                            (("2" (EXPAND "member")
                              (("2" (EXPAND "powerset")
                                (("2" (EXPAND "image")
                                  (("2" (PROP)
                                    (("2" (SKOLEM-TYPEPRED)
                                      (("2" (HIDE -2 -5)
                                        (("2" (HIDE -1)
                                          (("2" (EXPAND "subset?")
                                            (("2" (EXPAND "add")
                                              (("2" (INST -1 "choose(A!1)")
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|e15_16_TCC1| 0
  (|e15_16_TCC1-1| NIL 3888781126
   ("" (SKOLEM-TYPEPRED)
    (("" (LEMMA "finite_universe")
      (("" (LEMMA "finite_subset[D]" ("A" "fullset[D]" "s" "x!1"))
        (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|finite_universe| FORMULA-DECL NIL |real_aux| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|is_finite_type| CONST-DECL "bool" |finite_sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[D]])"
     |real_aux| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (D FORMAL-NONEMPTY-TYPE-DECL NIL |real_aux| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL))
   NIL
   (|e15_16| SUBTYPE
    "LAMBDA B: number_fields.*(exponentiation.^((-1), (finite_sets[real_aux.D].card(real_aux.B))), finite_sets_product[real_aux.D, real, 1, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*)].product(real_aux.B, real_aux.f))"
    "[set[D] -> real]")))
 (|e15_16| 0
  (|e15_16-1| |nil| 3886832201
   ("" (INDUCT "A" :NAME "finite_set_induction_rest[D]")
    (("1" (SKOSIMP)
      (("1" (LEMMA "product_emptyset_rew")
        (("1" (INST?)
          (("1"
            (LEMMA "sum_singleton_rew"
             ("S" "powerset(emptyset[D])" "t" "emptyset[D]" "f"
              "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)"))
            (("1" (LEMMA "empty_powerset[D]" ("a" "emptyset[D]"))
              (("1" (REPLACE -3 * LR T)
                (("1" (LEMMA "empty_card[D]")
                  (("1" (INST?)
                    (("1" (ASSERT)
                      (("1" (CASE "empty?(emptyset[D])")
                        (("1" (ASSERT)
                          (("1"
                            (LEMMA "product_emptyset_rew"
                             ("S" "emptyset[D]" "f" "f!1"))
                            (("1" (GROUND)
                              (("1" (REPLACE -1 * LR T) (("1" (GRIND) NIL NIL))
                                NIL)
                               ("2" (HIDE - 2)
                                (("2"
                                  (LEMMA "card_def"
                                   ("S" "sets[D].powerset(sets[D].emptyset)"))
                                  (("2" (REPLACE -1 * LR T)
                                    (("2" (LEMMA "Card_injection[set[D]]")
                                      (("2" (LEMMA "Card_surjection[set[D]]")
                                        (("2" (INST?)
                                          (("2" (INST? -2)
                                            (("2" (GROUND)
                                              (("2" (INST -1 "1")
                                                (("2" (INST -2 "1")
                                                  (("2" (GROUND)
                                                    (("1"
                                                      (INST 1
                                                       "lambda (z: (powerset(emptyset[D]))): 0")
                                                      (("1" (HIDE 2)
                                                        (("1"
                                                          (EXPAND "injective?")
                                                          (("1"
                                                            (SKOLEM-TYPEPRED)
                                                            (("1"
                                                              (EXPAND
                                                               "powerset")
                                                              (("1"
                                                                (EXPAND
                                                                 "subset?")
                                                                (("1"
                                                                  (EXPAND
                                                                   "emptyset")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "member")
                                                                    (("1"
                                                                      (APPLY-EXTENSIONALITY
                                                                       1 :HIDE?
                                                                       T)
                                                                      (("1"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (INST 1
                                                       "lambda (z: (powerset(emptyset[D]))): 0")
                                                      (("2"
                                                        (EXPAND "surjective?")
                                                        (("2" (SKOLEM-TYPEPRED)
                                                          (("2" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("3"
                                                      (INST 2
                                                       "lambda (z: (powerset(emptyset[D]))): 0")
                                                      (("3" (HIDE 1 3)
                                                        (("3"
                                                          (EXPAND
                                                           "surjective?")
                                                          (("3"
                                                            (SKOLEM-TYPEPRED)
                                                            (("3"
                                                              (INST 1
                                                               "sets[D].emptyset")
                                                              (("3" (GRIND) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (GRIND) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE - 2)
              (("2" (SKOLEM-TYPEPRED)
                (("2" (LEMMA "finite_universe")
                  (("2" (LEMMA "finite_subset[D]" ("A" "fullset[D]" "s" "x!1"))
                    (("1" (EXPAND "subset?")
                      (("1" (PROP) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                     ("2" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKOLEM-TYPEPRED)
      (("2" (PROP)
        (("2" (SKOLEM-TYPEPRED)
          (("2" (INST?)
            (("2" (LEMMA "product_rest" ("S" "SS!1" "f" "n_f(f!1)"))
              (("2" (ASSERT)
                (("2" (REPLACE -1 * RL T)
                  (("2" (REPLACE -2 * LR T)
                    (("2" (EXPAND "n_f")
                      (("2" (LEMMA "powerset_rew[D]" ("A" "SS!1"))
                        (("2" (REPLACE -1 * RL T)
                          (("2"
                            (LEMMA "sum_mult"
                             ("S" "powerset(rest(SS!1))" "c"
                              "f!1(choose(SS!1))" "f"
                              "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)"))
                            (("1" (REPLACE -1 * RL T)
                              (("1"
                                (LEMMA "sum_map_dom"
                                 ("X" "powerset(rest(SS!1))" "f"
                                  "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)"
                                  "g"
                                  "LAMBDA (G: set[D]): add(choose(SS!1), G)"))
                                (("1" (GROUND)
                                  (("1" (EXPAND "o")
                                    (("1"
                                      (LEMMA "sum_disj_union"
                                       ("A" "powerset(rest(SS!1))" "B"
                                        "extend[setof[D], (nonempty?[D]), bool, FALSE]
                     (image(LAMBDA (G: set[D]): add(choose(SS!1), G), powerset(rest(SS!1))))"
                                        "f"
                                        "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)"))
                                      (("1" (GROUND)
                                        (("1" (REPLACE -1 * LR T)
                                          (("1" (GROUND)
                                            (("1"
                                              (LEMMA "sum_eq_doms"
                                               ("A"
                                                "(function_image[sets[D].set, sets[D].set].image
                     (LAMBDA (G: sets[D].set):
                        sets[D].add(sets[D].choose(SS!1), G),
                      sets[D].powerset(sets[D].rest(SS!1))))"
                                                "B" "extend
                    [defined_types[D].setof, (sets[D].nonempty?),
                     booleans.bool, booleans.FALSE].extend
                    (function_image[sets[D].set, (sets[D].nonempty?)].image
                         (LAMBDA (G: sets[D].set):
                            sets[D].add(sets[D].choose(SS!1), G),
                          sets[D].powerset(sets[D].rest(SS!1))))"
                                                "f"
                                                "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)"))
                                              (("1" (PROP)
                                                (("1" (REPLACE -1 * LR T)
                                                  (("1" (REPLACE -1 * RL T)
                                                    (("1"
                                                      (LEMMA "e15_16_3"
                                                       ("A" "SS!1" "f" "f!1"))
                                                      (("1" (GROUND)
                                                        (("1"
                                                          (LEMMA "sum_eq_funs"
                                                           ("S"
                                                            "powerset(rest(SS!1))"
                                                            "f" "LAMBDA B:
             (f!1(choose(SS!1)) * (-1) ^ (1 + card(B))) * product(B, f!1)"
                                                            "g"
                                                            "LAMBDA (x: set[D]):
             (-1) ^ (card(add(choose(SS!1), x))) *
              product(add(choose(SS!1), x), f!1)"))
                                                          (("1" (GROUND)
                                                            (("1"
                                                              (REPLACE -1 * LR
                                                                       T)
                                                              (("1"
                                                                (REPLACE -1 *
                                                                         RL T)
                                                                (("1"
                                                                  (BOTH-SIDES
                                                                   "*" "-1" 2)
                                                                  (("1"
                                                                    (GROUND)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "sum_eq_funs"
                                                                       ("S"
                                                                        "powerset(rest(SS!1))"
                                                                        "f"
                                                                        "LAMBDA B:
             f!1(choose(SS!1)) * (-1) ^ (card(B)) * product(B, f!1)"
                                                                        "g"
                                                                        "LAMBDA (t: set[D]): f!1(choose(SS!1)) * ((-1) ^ (card(t)) * product(t, f!1))"))
                                                                      (("1"
                                                                        (GROUND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE 3)
                                                                    (("2"
                                                                      (GROUND)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (HIDE 3)
                                                              (("2"
                                                                (SKOLEM-TYPEPRED)
                                                                (("2" (HIDE -2)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "card_add"
                                                                     ("x"
                                                                      "choose(SS!1)"
                                                                      "S"
                                                                      "t!1"))
                                                                    (("2"
                                                                      (LIFT-IF)
                                                                      (("2"
                                                                        (GROUND)
                                                                        (("1"
                                                                          (HIDE
                                                                           -2
                                                                           1)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "powerset")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "subset?")
                                                                              (("1"
                                                                                (INST
                                                                                 -2
                                                                                 "choose(SS!1)")
                                                                                (("1"
                                                                                  (GRIND)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (REPLACE
                                                                           -1 *
                                                                           LR
                                                                           T)
                                                                          (("2"
                                                                            (LEMMA
                                                                             "product_add"
                                                                             ("x"
                                                                              "choose(SS!1)"
                                                                              "S"
                                                                              "t!1"
                                                                              "f"
                                                                              "f!1"))
                                                                            (("2"
                                                                              (REPLACE
                                                                               -1
                                                                               *
                                                                               LR
                                                                               T)
                                                                              (("2"
                                                                                (LIFT-IF)
                                                                                (("2"
                                                                                  (GROUND)
                                                                                  (("2"
                                                                                    (GRIND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE 3 -1)
                                                            (("2"
                                                              (SKOLEM-TYPEPRED)
                                                              (("2"
                                                                (LEMMA
                                                                 "finite_universe")
                                                                (("2"
                                                                  (LEMMA
                                                                   "finite_subset[D]"
                                                                   ("A"
                                                                    "fullset[D]"
                                                                    "s" "x!1"))
                                                                  (("1"
                                                                    (EXPAND
                                                                     "subset?")
                                                                    (("1"
                                                                      (PROP)
                                                                      (("1"
                                                                        (LEMMA
                                                                         "finite_add"
                                                                         ("x"
                                                                          "choose[D](SS!1)"
                                                                          "A"
                                                                          "x!1"))
                                                                        (("1"
                                                                          (PROPAX)
                                                                          NIL
                                                                          NIL)
                                                                         ("2"
                                                                          (PROPAX)
                                                                          NIL
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE -2 2
                                                                     3)
                                                                    (("2"
                                                                      (GRIND)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (LEMMA "sum_mult"
                                                           ("S"
                                                            "powerset(rest(SS!1))"
                                                            "c" "-1" "f"
                                                            "LAMBDA (t: set[D]):
             f!1(choose(SS!1)) * ((-1) ^ (card(t)) * product(t, f!1))"))
                                                          (("2"
                                                            (REPLACE -1 * RL T)
                                                            (("2" (BETA 3)
                                                              (("2"
                                                                (LEMMA
                                                                 "sum_eq_funs"
                                                                 ("S"
                                                                  "powerset(rest(SS!1))"
                                                                  "f"
                                                                  "LAMBDA (t_1: set[D]):
            -1 *
             (f!1(choose(SS!1)) *
               ((-1) ^ (card(t_1)) * product(t_1, f!1)))"
                                                                  "g"
                                                                  "LAMBDA (x: set[D]):
             (-1) ^ (card(add(choose(SS!1), x))) *
              product(add(choose(SS!1), x), f!1)"))
                                                                (("1" (GROUND)
                                                                  (("1"
                                                                    (HIDE 4)
                                                                    (("1"
                                                                      (SKOLEM-TYPEPRED)
                                                                      (("1"
                                                                        (LEMMA
                                                                         "product_add"
                                                                         ("x"
                                                                          "choose(SS!1)"
                                                                          "S"
                                                                          "t!1"
                                                                          "f"
                                                                          "f!1"))
                                                                        (("1"
                                                                          (LEMMA
                                                                           "card_add"
                                                                           ("x"
                                                                            "choose(SS!1)"
                                                                            "S"
                                                                            "t!1"))
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             *
                                                                             LR
                                                                             T)
                                                                            (("1"
                                                                              (REPLACE
                                                                               -1
                                                                               *
                                                                               LR
                                                                               T)
                                                                              (("1"
                                                                                (LIFT-IF)
                                                                                (("1"
                                                                                  (GROUND)
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     1)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "powerset")
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "subset?")
                                                                                        (("1"
                                                                                          (INST
                                                                                           -2
                                                                                           "choose(SS!1)")
                                                                                          (("1"
                                                                                            (GRIND)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (LIFT-IF)
                                                                                    (("2"
                                                                                      (GROUND)
                                                                                      (("1"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (HIDE 4)
                                                                  (("2"
                                                                    (SKOLEM-TYPEPRED)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "finite_universe")
                                                                      (("2"
                                                                        (LEMMA
                                                                         "finite_subset[D]"
                                                                         ("A"
                                                                          "fullset[D]"
                                                                          "s"
                                                                          "x!1"))
                                                                        (("1"
                                                                          (EXPAND
                                                                           "subset?")
                                                                          (("1"
                                                                            (PROP)
                                                                            (("1"
                                                                              (LEMMA
                                                                               "finite_add"
                                                                               ("x"
                                                                                "choose[D](SS!1)"
                                                                                "A"
                                                                                "x!1"))
                                                                              (("1"
                                                                                (PROPAX)
                                                                                NIL
                                                                                NIL)
                                                                               ("2"
                                                                                (PROPAX)
                                                                                NIL
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (LEMMA
                                                                               "finite_add"
                                                                               ("x"
                                                                                "choose[D](SS!1)"
                                                                                "A"
                                                                                "x!1"))
                                                                              (("1"
                                                                                (PROPAX)
                                                                                NIL
                                                                                NIL)
                                                                               ("2"
                                                                                (GRIND)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (LEMMA
                                                                           "finite_add"
                                                                           ("x"
                                                                            "choose[D](SS!1)"
                                                                            "A"
                                                                            "x!1"))
                                                                          (("1"
                                                                            (PROPAX)
                                                                            NIL
                                                                            NIL)
                                                                           ("2"
                                                                            (GRIND)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE -1 3)
                                                  (("2" (EXPAND "image")
                                                    (("2" (EXPAND "extend")
                                                      (("2"
                                                        (APPLY-EXTENSIONALITY 1
                                                         :HIDE? T)
                                                        (("2" (LIFT-IF)
                                                          (("2" (GROUND)
                                                            (("2"
                                                              (SKOLEM-TYPEPRED)
                                                              (("2" (GRIND) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE -1 3)
                                          (("2" (EXPAND "disjoint?")
                                            (("2" (EXPAND "intersection")
                                              (("2" (EXPAND "empty?")
                                                (("2" (SKOLEM-TYPEPRED)
                                                  (("2" (EXPAND "member")
                                                    (("2" (EXPAND "powerset")
                                                      (("2" (EXPAND "image")
                                                        (("2"
                                                          (EXPAND "subset?")
                                                          (("2"
                                                            (EXPAND "extend")
                                                            (("2" (GROUND)
                                                              (("2"
                                                                (SKOLEM-TYPEPRED)
                                                                (("2"
                                                                  (INST -4
                                                                   "choose(SS!1)")
                                                                  (("2"
                                                                    (GROUND)
                                                                    (("1"
                                                                      (GRIND)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (GRIND)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 3)
                                    (("2" (EXPAND "injective?")
                                      (("2" (SKOLEM-TYPEPRED)
                                        (("2" (EXPAND "restrict")
                                          (("2" (EXPAND "add")
                                            (("2" (EXPAND "powerset")
                                              (("2" (EXPAND "subset?")
                                                (("2" (EXPAND "member")
                                                  (("2" (GROUND)
                                                    (("2"
                                                      (APPLY-EXTENSIONALITY 1
                                                       :HIDE? T)
                                                      (("2" (INST -1 "x!1")
                                                        (("2" (INST -2 "x!1")
                                                          (("2"
                                                            (CASE
                                                                "choose(SS!1) = x!1")
                                                            (("1"
                                                              (REPLACE -1 * LR)
                                                              (("1" (GROUND)
                                                                (("1"
                                                                  (HIDE -4 1)
                                                                  (("1" (GRIND)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (HIDE -4 1)
                                                                  (("2" (GRIND)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("3"
                                                                  (HIDE -4 1)
                                                                  (("3" (GRIND)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (GROUND)
                                                              (("1"
                                                                (DECOMPOSE-EQUALITY
                                                                 -3)
                                                                (("1"
                                                                  (INST -1
                                                                   "x!1")
                                                                  (("1" (GRIND)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (DECOMPOSE-EQUALITY
                                                                 -3)
                                                                (("2"
                                                                  (INST -1
                                                                   "x!1")
                                                                  (("2" (GRIND)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("3"
                                                                (DECOMPOSE-EQUALITY
                                                                 -3)
                                                                (("3"
                                                                  (INST -1
                                                                   "x!1")
                                                                  (("3" (GRIND)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 3)
                              (("2" (SKOLEM-TYPEPRED)
                                (("2" (LEMMA "finite_universe")
                                  (("2"
                                    (LEMMA "finite_subset[D]"
                                     ("A" "fullset[D]" "s" "x!1"))
                                    (("1" (EXPAND "subset?")
                                      (("1" (PROP) (("1" (GRIND) NIL NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE -2 2 3)
                                      (("2" (EXPAND "fullset")
                                        (("2" (EXPAND "is_finite_type")
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKOLEM-TYPEPRED)
        (("3" (LEMMA "finite_universe")
          (("3" (LEMMA "finite_subset[D]" ("A" "fullset[D]" "s" "x!1"))
            (("1" (EXPAND "subset?") (("1" (PROP) (("1" (GRIND) NIL NIL)) NIL))
              NIL)
             ("2" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|product| DEF-DECL "R" |finite_sets_product| |finite_sets|)
    (|n_f| CONST-DECL "real" |real_aux| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sum| DEF-DECL "R" |finite_sets_sum| |finite_sets|)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|powerset| CONST-DECL "setofsets" |sets| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|powerset_finite| APPLICATION-JUDGEMENT "finite_set[set[T]]"
     |finite_sets_of_sets| NIL)
    (|nonempty_powerset| APPLICATION-JUDGEMENT "(nonempty?[set[D]])" |real_aux|
     NIL)
    (|powerset_finite3| APPLICATION-JUDGEMENT
     "non_empty_finite_set[finite_set[D]]" |real_aux| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (D FORMAL-NONEMPTY-TYPE-DECL NIL |real_aux| NIL)
    (|finite_set_induction_rest| FORMULA-DECL NIL |finite_sets_inductions|
     |finite_sets|)
    (|product_emptyset_rew| FORMULA-DECL NIL |finite_sets_product_real|
     |finite_sets|)
    (|sum_singleton_rew| FORMULA-DECL NIL |finite_sets_sum_real| |finite_sets|)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|Card_surjection| FORMULA-DECL NIL |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[D]])"
     |real_aux| NIL)
    (|Card_injection| FORMULA-DECL NIL |finite_sets| NIL)
    (|card_def| FORMULA-DECL NIL |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|empty_card| FORMULA-DECL NIL |finite_sets| NIL)
    (|empty_powerset| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)
    (|is_finite_type| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_universe| FORMULA-DECL NIL |real_aux| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |real_aux| NIL)
    (|finite_rest| APPLICATION-JUDGEMENT "finite_set[T]" |real_aux| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|powerset_rew| FORMULA-DECL NIL |powerset_aux| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL) (|rest| CONST-DECL "set" |sets| NIL)
    (|sum_mult| FORMULA-DECL NIL |finite_sets_sum_real| |finite_sets|)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|sum_map_dom| FORMULA-DECL NIL |finite_sum_aux| NIL)
    (O CONST-DECL "T3" |function_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|finite_add| FORMULA-DECL NIL |finite_sets| NIL)
    (|neg_times_neg| FORMULA-DECL NIL |real_props| NIL)
    (|odd?| CONST-DECL "bool" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|card_add| FORMULA-DECL NIL |finite_sets| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|finite_remove| APPLICATION-JUDGEMENT "finite_set[T]" |real_aux| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|product_add| FORMULA-DECL NIL |finite_sets_product| |finite_sets|)
    (|sum_eq_funs| FORMULA-DECL NIL |finite_sets_sum_real| |finite_sets|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|e15_16_3| FORMULA-DECL NIL |real_aux| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|sum_eq_doms| FORMULA-DECL NIL |finite_sum_aux2| NIL)
    (|finite_intersection2| APPLICATION-JUDGEMENT "finite_set[set[D]]"
     |real_aux| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|sum_disj_union| FORMULA-DECL NIL |finite_sets_sum| |finite_sets|)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|image| CONST-DECL "set[R]" |function_image| NIL)
    (|finite_image| APPLICATION-JUDGEMENT "finite_set[R]" |function_image_aux|
     NIL)
    (|finite_extend| APPLICATION-JUDGEMENT "finite_set[T]" |extend_set_props|
     NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set[set[D]]" |real_aux| NIL)
    (|nonempty_union1| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|product_rest| FORMULA-DECL NIL |finite_sets_product| |finite_sets|)
    (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL))
   SHOSTAK)))

