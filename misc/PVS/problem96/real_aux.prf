(real_aux
 (e15_16_1 0
  (e15_16_1-1 nil 3886974872
   ("" (skolem-typepred)
    (("" (ground)
      (("" (lemma "product_rest")
        (("" (inst -1 "A!1" "n_f(f!1)") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (finite_rest application-judgement "finite_set[D]" real_aux nil)
    (n_f const-decl "real" real_aux nil)
    (finite_remove application-judgement "finite_set[D]" real_aux nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rest const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (nonempty? const-decl "bool" sets nil)
    (product_rest formula-decl nil finite_sets_product finite_sets)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (D formal-nonempty-type-decl nil real_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (e15_16_2_TCC1 0
  (e15_16_2_TCC1-1 nil 3888781126
   ("" (lemma "finite_universe")
    (("" (skolem-typepred)
      (("" (ground)
        (("" (skolem-typepred)
          (("" (lemma "finite_subset[D]")
            (("" (inst -1 "fullset[D]" "x!1")
              (("1" (ground)
                (("1" (hide -1 -3 2)
                  (("1" (expand "subset?") (("1" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -3 2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (D formal-nonempty-type-decl nil real_aux nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fullset const-decl "set" sets nil)
    (injective? const-decl "bool" functions nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[D]])"
     real_aux nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_subset formula-decl nil finite_sets nil)
    (finite_universe formula-decl nil real_aux nil))
   nil
   (e15_16_2 subtype
    "LAMBDA B: number_fields.*(exponentiation.^(((number_fields.-)(1)), (finite_sets[real_aux.D].card(real_aux.B))), finite_sets_product[real_aux.D, real, 1, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*)].product(real_aux.B, real_aux.f))"
    "[set[D] -> real]")))
 (e15_16_2 0
  (e15_16_2-1 nil 3886975279
   ("" (skolem-typepred)
    (("" (ground)
      (("" (lemma "sum_mult")
        ((""
          (inst -1 "powerset(rest(A!1))" "f!1(choose(A!1))"
           "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)")
          (("1" (replace -1 * rl t)
            (("1" (lemma "sum_eq_funs")
              (("1"
                (inst -1 "powerset(rest(A!1))" "LAMBDA (t: set[D]):
            f!1(choose(A!1)) * ((-1) ^ (card(t)) * product(t, f!1))"
                 "LAMBDA B: f!1(choose(A!1)) * (-1) ^ (card(B)) * product(B, f!1)")
                (("1" (ground) nil nil)
                 ("2" (hide - 2)
                  (("2" (lemma "finite_universe")
                    (("2" (skolem-typepred)
                      (("2" (lemma "finite_subset[D]")
                        (("2" (inst -1 "fullset[D]" "t!1")
                          (("1" (ground)
                            (("1" (expand "subset?")
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide - 2)
            (("2" (skolem-typepred)
              (("2" (lemma "finite_universe")
                (("2"
                  (lemma "finite_subset[D]"
                   ("A" "fullset[D]" "s" "x!1"))
                  (("1" (grind) nil nil)
                   ("2" (hide 2) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (powerset_finite application-judgement "finite_set[set[T]]"
     finite_sets_of_sets nil)
    (nonempty_powerset application-judgement "(nonempty?[set[D]])"
     real_aux nil)
    (powerset_finite3 application-judgement
     "non_empty_finite_set[finite_set[D]]" real_aux nil)
    (finite_rest application-judgement "finite_set[D]" real_aux nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (powerset const-decl "setofsets" sets nil)
    (rest const-decl "set" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (restrict const-decl "R" restrict nil)
    (product def-decl "R" finite_sets_product finite_sets)
    (sum_eq_funs formula-decl nil finite_sets_sum_real finite_sets)
    (fullset const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[D]])"
     real_aux nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finite_subset formula-decl nil finite_sets nil)
    (finite_universe formula-decl nil real_aux nil)
    (sum_mult formula-decl nil finite_sets_sum_real finite_sets)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (D formal-nonempty-type-decl nil real_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (e15_16_3 0
  (e15_16_3-1 nil 3886975712
   ("" (skolem-typepred)
    (("" (lemma "sum_mult")
      (("" (inst?)
        (("1" (inst -1 "-1")
          (("1" (ground)
            (("1" (both-sides "*" "-1" -1)
              (("1" (ground)
                (("1" (replace -1 * rl)
                  (("1"
                    (case "(LAMBDA (t: finite_set[D]): -1 * (f!1(choose(A!1)) * (-1) ^ (card(t)) * product(t, f!1))) = LAMBDA (t: finite_set[D]): (f!1(choose(A!1)) * (-1) ^ (1 + card(t)) * product(t, f!1))")
                    (("1" (replace -1 * rl t)
                      (("1" (replace -1 * lr t)
                        (("1"
                          (lemma "sum_mult"
                           ("S" "powerset(rest(A!1))" "c" "-1" "f"
                            "LAMBDA (t: finite_set[D]):
              f!1(choose(A!1)) * (-1) ^ (card(t)) * product(t, f!1)"))
                          (("1" (replace -1 * rl t)
                            (("1" (beta 1)
                              (("1"
                                (ground)
                                (("1"
                                  (lemma
                                   "sum_eq_funs"
                                   ("S"
                                    "powerset(rest(A!1))"
                                    "f"
                                    "LAMBDA (t: finite_set[D]):
              -1 * (f!1(choose(A!1)) * (-1) ^ (card(t)) * product(t, f!1))"
                                    "g"
                                    "LAMBDA (t_1: set[D]):
            -1 *
             (f!1(choose(A!1)) * (-1) ^ (card(t_1)) * product(t_1, f!1))"))
                                  (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide - 2)
                            (("2" (skolem-typepred)
                              (("2"
                                (lemma "finite_universe")
                                (("2"
                                  (lemma
                                   "finite_subset[D]"
                                   ("A" "fullset[D]" "s" "x!1"))
                                  (("1"
                                    (expand "subset?")
                                    (("1"
                                      (prop)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (delete -1 2)
                      (("2" (apply-extensionality 1 :hide? t)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide - 2)
                (("2" (lemma "finite_universe")
                  (("2" (skolem-typepred)
                    (("2"
                      (lemma "finite_subset[D]"
                       ("A" "fullset[D]" "s" "t!1"))
                      (("1" (prop)
                        (("1" (expand "subset?")
                          (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide - 2)
          (("2" (skolem-typepred)
            (("2" (lemma "finite_universe")
              (("2"
                (lemma "finite_subset[D]" ("A" "fullset[D]" "s" "x!1"))
                (("1" (expand "subset?")
                  (("1" (prop) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (ground) nil nil))
        nil))
      nil))
    nil)
   ((sum_mult formula-decl nil finite_sets_sum_real finite_sets)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum def-decl "R" finite_sets_sum finite_sets)
    (odd? const-decl "bool" integers nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (empty? const-decl "bool" sets nil)
    (expt def-decl "real" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sum_eq_funs formula-decl nil finite_sets_sum_real finite_sets)
    (finite_subset formula-decl nil finite_sets nil)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (subset? const-decl "bool" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_universe formula-decl nil real_aux nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (finite_rest application-judgement "finite_set[D]" real_aux nil)
    (product def-decl "R" finite_sets_product finite_sets)
    (restrict const-decl "R" restrict nil)
    (choose const-decl "(p)" sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (rest const-decl "set" sets nil)
    (powerset const-decl "setofsets" sets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (A!1 skolem-const-decl "finite_set[D]" real_aux nil)
    (nonempty? const-decl "bool" sets nil)
    (powerset_finite application-judgement "finite_set[set[T]]"
     finite_sets_of_sets nil)
    (nonempty_powerset application-judgement "(nonempty?[set[D]])"
     real_aux nil)
    (powerset_finite3 application-judgement
     "non_empty_finite_set[finite_set[D]]" real_aux nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (D formal-nonempty-type-decl nil real_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (e15_16_4_TCC1 0
  (e15_16_4_TCC1-1 nil 3889242991
   ("" (skolem-typepred)
    (("" (ground)
      (("1" (lemma "finite_universe")
        (("1" (expand "is_finite_type")
          (("1" (lemma "finite_subset[D]")
            (("1" (skolem-typepred 1)
              (("1" (inst -1 "fullset" "x!1")
                (("1" (grind) nil nil)
                 ("2" (hide -2 -3 2) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem-typepred) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[D]])"
     real_aux nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (finite_subset formula-decl nil finite_sets nil)
    (finite_universe formula-decl nil real_aux nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (empty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (O const-decl "T3" function_props nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[D]" real_aux nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (D formal-nonempty-type-decl nil real_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (e15_16_4 subtype
    "function_props[finite_set[D], finite_set[D], numfield].o((LAMBDA B: number_fields.*(exponentiation.^(((number_fields.-)(1)), (finite_sets[real_aux.D].card(real_aux.B))), finite_sets_product[real_aux.D, real, 1, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*)].product(real_aux.B, real_aux.f))), (LAMBDA B: sets[real_aux.D].add(sets[real_aux.D].choose(real_aux.A), real_aux.B)))"
    "[set[D] -> real]")))
 (e15_16_4 0
  (e15_16_4-1 nil 3887052389
   ("" (skolem-typepred)
    (("" (ground)
      (("" (lemma "sum_f_g")
        (("" (inst?)
          (("1" (ground)
            (("1" (skolem-typepred)
              (("1" (delete 2)
                (("1" (expand "o")
                  (("1" (lemma "product_add")
                    (("1" (inst?)
                      (("1" (replace -1 * lr)
                        (("1" (delete -1)
                          (("1" (lemma "choose_not_member[D]")
                            (("1" (expand "powerset")
                              (("1"
                                (expand "subset?")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (ground)
                                      (("1"
                                        (lemma "card_add[D]")
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2" (grind) nil nil)
                                       ("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide - 2)
            (("2" (skolem-typepred)
              (("2" (lemma "finite_universe")
                (("2"
                  (lemma "finite_subset[D]"
                   ("A" "fullset[D]" "s" "x!1"))
                  (("1" (expand "subset?")
                    (("1" (prop) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((powerset_finite application-judgement "finite_set[set[T]]"
     finite_sets_of_sets nil)
    (nonempty_powerset application-judgement "(nonempty?[set[D]])"
     real_aux nil)
    (powerset_finite3 application-judgement
     "non_empty_finite_set[finite_set[D]]" real_aux nil)
    (finite_rest application-judgement "finite_set[D]" real_aux nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[D]" real_aux nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (powerset const-decl "setofsets" sets nil)
    (rest const-decl "set" sets nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (product def-decl "R" finite_sets_product finite_sets)
    (O const-decl "T3" function_props nil)
    (add const-decl "(nonempty?)" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_remove application-judgement "finite_set[D]" real_aux nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (expt def-decl "real" exponentiation nil)
    (injective? const-decl "bool" functions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (card_add formula-decl nil finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (choose_not_member formula-decl nil sets_lemmas nil)
    (product_add formula-decl nil finite_sets_product finite_sets)
    (finite_subset formula-decl nil finite_sets nil)
    (fullset const-decl "set" sets nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (finite_universe formula-decl nil real_aux nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sum_f_g formula-decl nil finite_sets_sum finite_sets)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (D formal-nonempty-type-decl nil real_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (e15_16_6 0
  (e15_16_6-2 "" 3888280935
   ("" (skolem-typepred)
    (("" (prop)
      (("" (lemma "sum_disj_union")
        (("" (lemma "powerset_rew")
          (("" (inst?)
            (("" (inst?)
              (("" (replace -1 1 rl t)
                (("" (lemma "sum_eq_doms")
                  (("" (inst?)
                    (("1" (ground)
                      (("1"
                        (inst -2
                         "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)")
                        (("1" (ground)
                          (("1" (replace -1 * lr t)
                            (("1"
                              (both-sides "-" "sum(powerset(rest(A!1)),
            LAMBDA B: (-1) ^ (card(B)) * product(B, f!1))" 1)
                              (("1"
                                (ground)
                                (("1"
                                  (lemma
                                   "sum_eq_doms"
                                   ("A"
                                    "extend[set[D], (nonempty?[D]), bool, FALSE]
              (image(LAMBDA B: add(choose(A!1), B), powerset(rest(A!1))))"
                                    "B"
                                    "extend[setof[D], (nonempty?[D]), bool, FALSE]
               (image(LAMBDA (G: set[D]): add(choose(A!1), G),
                      powerset(rest(A!1))))"
                                    "f"
                                    "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)"))
                                  (("1"
                                    (ground)
                                    (("1"
                                      (hide -1 2)
                                      (("1"
                                        (expand "extend")
                                        (("1"
                                          (apply-extensionality
                                           1
                                           :hide?
                                           t)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide - 2)
                                    (("2"
                                      (skolem-typepred)
                                      (("2"
                                        (lemma "finite_universe")
                                        (("2"
                                          (lemma
                                           "finite_subset[D]"
                                           ("A"
                                            "fullset[D]"
                                            "s"
                                            "x!1"))
                                          (("1"
                                            (expand "subset?")
                                            (("1"
                                              (prop)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide - 2)
                                (("2"
                                  (skolem-typepred)
                                  (("2"
                                    (lemma "finite_universe")
                                    (("2"
                                      (lemma
                                       "finite_subset[D]"
                                       ("A" "fullset[D]" "s" "x!1"))
                                      (("1"
                                        (expand "subset?")
                                        (("1"
                                          (prop)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 2)
                            (("2" (expand "disjoint?")
                              (("2"
                                (expand "intersection")
                                (("2"
                                  (expand "empty?")
                                  (("2"
                                    (skolem-typepred)
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (expand "powerset")
                                        (("2"
                                          (expand "subset?")
                                          (("2"
                                            (ground)
                                            (("2"
                                              (expand "extend")
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (expand "image")
                                                  (("2"
                                                    (skolem-typepred)
                                                    (("2"
                                                      (inst
                                                       -4
                                                       "choose(A!1)")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide - 2)
                          (("2" (skolem-typepred)
                            (("2" (lemma "finite_universe")
                              (("2"
                                (lemma
                                 "finite_subset[D]"
                                 ("A" "fullset[D]" "s" "x!1"))
                                (("1"
                                  (expand "subset?")
                                  (("1"
                                    (prop)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide - 2)
                      (("2" (skolem-typepred)
                        (("2" (lemma "finite_universe")
                          (("2"
                            (lemma "finite_subset[D]"
                             ("A" "fullset[D]" "s" "x!1"))
                            (("1" (expand "subset?")
                              (("1"
                                (prop)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((powerset_rew formula-decl nil powerset_aux nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (powerset_finite3 application-judgement
     "non_empty_finite_set[finite_set[D]]" real_aux nil)
    (nonempty_powerset application-judgement "(nonempty?[set[D]])"
     real_aux nil)
    (powerset_finite application-judgement "finite_set[set[T]]"
     finite_sets_of_sets nil)
    (choose const-decl "(p)" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (image const-decl "set[R]" function_image nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (rest const-decl "set" sets nil)
    (powerset const-decl "setofsets" sets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (sum_eq_doms formula-decl nil finite_sum_aux2 nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (finite_rest application-judgement "finite_set[D]" real_aux nil)
    (finite_image application-judgement "finite_set[R]"
     function_image_aux nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[D]" real_aux nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (finite_union application-judgement "finite_set[set[D]]" real_aux
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sum def-decl "R" finite_sets_sum finite_sets)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_remove application-judgement "finite_set[D]" real_aux nil)
    (finite_subset formula-decl nil finite_sets nil)
    (fullset const-decl "set" sets nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (subset? const-decl "bool" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_universe formula-decl nil real_aux nil)
    (finite_intersection2 application-judgement "finite_set[set[D]]"
     real_aux nil)
    (disjoint? const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (intersection const-decl "set" sets nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (product def-decl "R" finite_sets_product finite_sets)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (A!1 skolem-const-decl "finite_set[D]" real_aux nil)
    (nonempty? const-decl "bool" sets nil)
    (sum_disj_union formula-decl nil finite_sets_sum finite_sets)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (D formal-nonempty-type-decl nil real_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)
  (e15_16_6-1 nil 3887064400
   ("" (skolem-typepred)
    (("" (prop)
      (("" (lemma "sum_disj_union")
        (("" (lemma "powerset_rew")
          (("" (inst?)
            (("" (inst?)
              (("" (replace -1 1 rl t)
                (("" (prop)
                  (("1" (replace -1 1 rl t)
                    (("1"
                      (case "image (LAMBDA B: add(choose(A!1), B), sets[D].powerset(sets[D].rest(A!1))) =
                 extend[setof[D], (nonempty?[D]), bool, FALSE]
            (image (LAMBDA (G: sets[D].set):
                              add(choose(A!1), G), sets[D].powerset(sets[D].rest(A!1))))")
                      (("1" (replace -1 1 lr t)
                        (("1"
                          (case "restrict[setof[D], (nonempty?[D]), bool]
                    (extend[setof[D], (nonempty?[D]), bool, FALSE]
                         (image(LAMBDA (G: sets[D].set):
                                  add(choose(A!1), G),
                                sets[D].powerset(sets[D].rest(A!1))))) = image(LAMBDA (G: set[D]): add(choose(A!1), G), powerset(rest(A!1)))")
                          (("1" (replace -1 1 lr t)
                            (("1" (expand "extend")
                              (("1"
                                (expand "image")
                                (("1"
                                  (case
                                   "{y: (nonempty?[D]) |
                   EXISTS (x: (powerset(rest(A!1)))):
                     y = add(choose(A!1), x)} = LAMBDA (t: setof[D]):
                   IF (nonempty?[D])(t)
                     THEN EXISTS (x: (powerset(rest(A!1)))):
                            t = add(choose(A!1), x)
                   ELSE FALSE
                   ENDIF")
                                  (("1"
                                    (replace -1 1 lr t)
                                    (("1"
                                      (expand "restrict")
                                      (("1" (postpone) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "restrict")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3" (grind) nil nil))
                                    nil)
                                   ("4"
                                    (hide 2)
                                    (("4" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "restrict")
                              (("2"
                                (expand "extend")
                                (("2"
                                  (expand "image")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "restrict")
                          (("2" (expand "extend")
                            (("2" (expand "image")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "disjoint?")
                      (("2" (expand "intersection")
                        (("2" (expand "empty?")
                          (("2" (skolem-typepred)
                            (("2" (expand "member")
                              (("2"
                                (expand "powerset")
                                (("2"
                                  (expand "image")
                                  (("2"
                                    (prop)
                                    (("2"
                                      (skolem-typepred)
                                      (("2"
                                        (hide -2 -5)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (expand "subset?")
                                            (("2"
                                              (expand "add")
                                              (("2"
                                                (inst -1 "choose(A!1)")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (e15_16_TCC1 0
  (e15_16_TCC1-1 nil 3888781126
   ("" (skolem-typepred)
    (("" (lemma "finite_universe")
      (("" (lemma "finite_subset[D]" ("A" "fullset[D]" "s" "x!1"))
        (("1" (grind) nil nil)
         ("2" (hide 2) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((finite_universe formula-decl nil real_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[D]])"
     real_aux nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (finite_subset formula-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fullset const-decl "set" sets nil)
    (D formal-nonempty-type-decl nil real_aux nil))
   nil
   (e15_16 subtype
    "LAMBDA B: number_fields.*(exponentiation.^(((number_fields.-)(1)), (finite_sets[real_aux.D].card(real_aux.B))), finite_sets_product[real_aux.D, real, 1, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*)].product(real_aux.B, real_aux.f))"
    "[set[D] -> real]")))
 (e15_16 0
  (e15_16-2 nil 3889257493
   ("" (induct "A" :name "finite_set_induction_rest[D]")
    (("1" (skosimp)
      (("1" (lemma "product_emptyset_rew")
        (("1" (inst?)
          (("1"
            (lemma "sum_singleton_rew"
             ("S" "powerset(emptyset[D])" "t" "emptyset[D]" "f"
              "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)"))
            (("1" (lemma "empty_powerset[D]" ("a" "emptyset[D]"))
              (("1" (replace -3 * lr t)
                (("1" (lemma "empty_card[D]")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (case "empty?(emptyset[D])")
                        (("1" (assert)
                          (("1"
                            (lemma "product_emptyset_rew"
                             ("S" "emptyset[D]" "f" "f!1"))
                            (("1" (ground)
                              (("1"
                                (replace -1 * lr t)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (hide - 2)
                                (("2"
                                  (lemma
                                   "card_def"
                                   ("S"
                                    "sets[D].powerset(sets[D].emptyset)"))
                                  (("2"
                                    (replace -1 * lr t)
                                    (("2"
                                      (lemma "Card_injection[set[D]]")
                                      (("2"
                                        (lemma
                                         "Card_surjection[set[D]]")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (inst? -2)
                                            (("2"
                                              (ground)
                                              (("2"
                                                (inst -1 "1")
                                                (("2"
                                                  (inst -2 "1")
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (inst
                                                       1
                                                       "lambda (z: (powerset(emptyset[D]))): 0")
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (expand
                                                           "injective?")
                                                          (("1"
                                                            (skolem-typepred)
                                                            (("1"
                                                              (expand
                                                               "powerset")
                                                              (("1"
                                                                (expand
                                                                 "subset?")
                                                                (("1"
                                                                  (expand
                                                                   "emptyset")
                                                                  (("1"
                                                                    (expand
                                                                     "member")
                                                                    (("1"
                                                                      (apply-extensionality
                                                                       1
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       1
                                                       "lambda (z: (powerset(emptyset[D]))): 0")
                                                      (("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (skolem-typepred)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (inst
                                                       2
                                                       "lambda (z: (powerset(emptyset[D]))): 0")
                                                      (("3"
                                                        (hide 1 3)
                                                        (("3"
                                                          (expand
                                                           "surjective?")
                                                          (("3"
                                                            (skolem-typepred)
                                                            (("3"
                                                              (inst
                                                               1
                                                               "sets[D].emptyset")
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide - 2)
              (("2" (skolem-typepred)
                (("2" (lemma "finite_universe")
                  (("2"
                    (lemma "finite_subset[D]"
                     ("A" "fullset[D]" "s" "x!1"))
                    (("1" (expand "subset?")
                      (("1" (prop) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem-typepred)
      (("2" (prop)
        (("2" (skolem-typepred)
          (("2" (inst?)
            (("2" (lemma "product_rest" ("S" "SS!1" "f" "n_f(f!1)"))
              (("2" (assert)
                (("2" (replace -1 * rl t)
                  (("2" (replace -2 * lr t)
                    (("2" (expand "n_f")
                      (("2" (lemma "powerset_rew[D]" ("A" "SS!1"))
                        (("2" (replace -1 * rl t)
                          (("2"
                            (lemma "sum_mult"
                             ("S" "powerset(rest(SS!1))" "c"
                              "f!1(choose(SS!1))" "f"
                              "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)"))
                            (("1" (replace -1 * rl t)
                              (("1"
                                (lemma
                                 "sum_map_dom"
                                 ("X"
                                  "powerset(rest(SS!1))"
                                  "f"
                                  "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)"
                                  "g"
                                  "LAMBDA (G: set[D]): add(choose(SS!1), G)"))
                                (("1"
                                  (ground)
                                  (("1"
                                    (expand "o")
                                    (("1"
                                      (lemma
                                       "sum_disj_union"
                                       ("A"
                                        "powerset(rest(SS!1))"
                                        "B"
                                        "extend[setof[D], (nonempty?[D]), bool, FALSE]
                              (image(LAMBDA (G: set[D]): add(choose(SS!1), G), powerset(rest(SS!1))))"
                                        "f"
                                        "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)"))
                                      (("1"
                                        (ground)
                                        (("1"
                                          (replace -1 * lr t)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (lemma
                                               "sum_eq_doms"
                                               ("A"
                                                "(function_image[sets[D].set, sets[D].set].image
                                (LAMBDA (G: sets[D].set):
                                   sets[D].add(sets[D].choose(SS!1), G),
                                 sets[D].powerset(sets[D].rest(SS!1))))"
                                                "B"
                                                "extend
                               [defined_types[D].setof, (sets[D].nonempty?),
                                booleans.bool, booleans.FALSE].extend
                               (function_image[sets[D].set, (sets[D].nonempty?)].image
                                    (LAMBDA (G: sets[D].set):
                                       sets[D].add(sets[D].choose(SS!1), G),
                                     sets[D].powerset(sets[D].rest(SS!1))))"
                                                "f"
                                                "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)"))
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replace -1 * lr t)
                                                  (("1"
                                                    (replace -1 * rl t)
                                                    (("1"
                                                      (lemma
                                                       "e15_16_3"
                                                       ("A"
                                                        "SS!1"
                                                        "f"
                                                        "f!1"))
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (lemma
                                                           "sum_eq_funs"
                                                           ("S"
                                                            "powerset(rest(SS!1))"
                                                            "f"
                                                            "LAMBDA B:
                            (f!1(choose(SS!1)) * (-1) ^ (1 + card(B))) * product(B, f!1)"
                                                            "g"
                                                            "LAMBDA (x: set[D]):
                            (-1) ^ (card(add(choose(SS!1), x))) *
                             product(add(choose(SS!1), x), f!1)"))
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               *
                                                               lr
                                                               t)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 *
                                                                 rl
                                                                 t)
                                                                (("1"
                                                                  (both-sides
                                                                   "*"
                                                                   "-1"
                                                                   2)
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (lemma
                                                                       "sum_eq_funs"
                                                                       ("S"
                                                                        "powerset(rest(SS!1))"
                                                                        "f"
                                                                        "LAMBDA B:
                                  f!1(choose(SS!1)) * (-1) ^ (card(B)) * product(B, f!1)"
                                                                        "g"
                                                                        "LAMBDA (t: set[D]): f!1(choose(SS!1)) * ((-1) ^ (card(t)) * product(t, f!1))"))
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     3)
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 3)
                                                              (("2"
                                                                (skolem-typepred)
                                                                (("2"
                                                                  (hide
                                                                   -2)
                                                                  (("2"
                                                                    (lemma
                                                                     "card_add[D]"
                                                                     ("x"
                                                                      "choose(SS!1)"
                                                                      "S"
                                                                      "t!1"))
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (ground)
                                                                        (("1"
                                                                          (hide
                                                                           -2
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "powerset")
                                                                            (("1"
                                                                              (expand
                                                                               "subset?")
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "choose(SS!1)")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -1
                                                                           *
                                                                           lr
                                                                           t)
                                                                          (("2"
                                                                            (lemma
                                                                             "product_add"
                                                                             ("x"
                                                                              "choose(SS!1)"
                                                                              "S"
                                                                              "t!1"
                                                                              "f"
                                                                              "f!1"))
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               *
                                                                               lr
                                                                               t)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (ground)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 3 -1)
                                                            (("2"
                                                              (skolem-typepred)
                                                              (("2"
                                                                (lemma
                                                                 "finite_universe")
                                                                (("2"
                                                                  (lemma
                                                                   "finite_subset[D]"
                                                                   ("A"
                                                                    "fullset[D]"
                                                                    "s"
                                                                    "x!1"))
                                                                  (("1"
                                                                    (expand
                                                                     "subset?")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (lemma
                                                                         "finite_add[D]"
                                                                         ("x"
                                                                          "choose[D](SS!1)"
                                                                          "A"
                                                                          "x!1"))
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -2
                                                                     2
                                                                     3)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "sum_mult"
                                                           ("S"
                                                            "powerset(rest(SS!1))"
                                                            "c"
                                                            "-1"
                                                            "f"
                                                            "LAMBDA (t: set[D]):
                            f!1(choose(SS!1)) * ((-1) ^ (card(t)) * product(t, f!1))"))
                                                          (("2"
                                                            (replace
                                                             -1
                                                             *
                                                             rl
                                                             t)
                                                            (("2"
                                                              (beta 3)
                                                              (("2"
                                                                (lemma
                                                                 "sum_eq_funs"
                                                                 ("S"
                                                                  "powerset(rest(SS!1))"
                                                                  "f"
                                                                  "LAMBDA (t_1: set[D]):
                           -1 *
                            (f!1(choose(SS!1)) *
                              ((-1) ^ (card(t_1)) * product(t_1, f!1)))"
                                                                  "g"
                                                                  "LAMBDA (x: set[D]):
                            (-1) ^ (card(add(choose(SS!1), x))) *
                             product(add(choose(SS!1), x), f!1)"))
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (hide
                                                                     4)
                                                                    (("1"
                                                                      (skolem-typepred)
                                                                      (("1"
                                                                        (lemma
                                                                         "product_add"
                                                                         ("x"
                                                                          "choose(SS!1)"
                                                                          "S"
                                                                          "t!1"
                                                                          "f"
                                                                          "f!1"))
                                                                        (("1"
                                                                          (lemma
                                                                           "card_add[D]"
                                                                           ("x"
                                                                            "choose(SS!1)"
                                                                            "S"
                                                                            "t!1"))
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             *
                                                                             lr
                                                                             t)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               *
                                                                               lr
                                                                               t)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (hide
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "powerset")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "subset?")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -2
                                                                                           "choose(SS!1)")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (ground)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   4)
                                                                  (("2"
                                                                    (skolem-typepred)
                                                                    (("2"
                                                                      (lemma
                                                                       "finite_universe")
                                                                      (("2"
                                                                        (lemma
                                                                         "finite_subset[D]"
                                                                         ("A"
                                                                          "fullset[D]"
                                                                          "s"
                                                                          "x!1"))
                                                                        (("1"
                                                                          (expand
                                                                           "subset?")
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (lemma
                                                                               "finite_add[D]"
                                                                               ("x"
                                                                                "choose[D](SS!1)"
                                                                                "A"
                                                                                "x!1"))
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "finite_add[D]"
                                                                               ("x"
                                                                                "choose[D](SS!1)"
                                                                                "A"
                                                                                "x!1"))
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "finite_add[D]"
                                                                           ("x"
                                                                            "choose[D](SS!1)"
                                                                            "A"
                                                                            "x!1"))
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 3)
                                                  (("2"
                                                    (expand "image")
                                                    (("2"
                                                      (expand "extend")
                                                      (("2"
                                                        (apply-extensionality
                                                         1
                                                         :hide?
                                                         t)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("2"
                                                              (skolem-typepred)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 3)
                                          (("2"
                                            (expand "disjoint?")
                                            (("2"
                                              (expand "intersection")
                                              (("2"
                                                (expand "empty?")
                                                (("2"
                                                  (skolem-typepred)
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (expand
                                                       "powerset")
                                                      (("2"
                                                        (expand
                                                         "image")
                                                        (("2"
                                                          (expand
                                                           "subset?")
                                                          (("2"
                                                            (expand
                                                             "extend")
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (skolem-typepred)
                                                                (("2"
                                                                  (inst
                                                                   -4
                                                                   "choose(SS!1)")
                                                                  (("2"
                                                                    (ground)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 3)
                                    (("2"
                                      (expand "injective?")
                                      (("2"
                                        (skolem-typepred)
                                        (("2"
                                          (expand "restrict")
                                          (("2"
                                            (expand "add")
                                            (("2"
                                              (expand "powerset")
                                              (("2"
                                                (expand "subset?")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (apply-extensionality
                                                       1
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (inst -1 "x!1")
                                                        (("2"
                                                          (inst
                                                           -2
                                                           "x!1")
                                                          (("2"
                                                            (case
                                                             "choose(SS!1) = x!1")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               *
                                                               lr)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (hide
                                                                   -4
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -4
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide
                                                                   -4
                                                                   1)
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (ground)
                                                              (("1"
                                                                (decompose-equality
                                                                 -3)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x!1")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (decompose-equality
                                                                 -3)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "x!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (decompose-equality
                                                                 -3)
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "x!1")
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2"
                                (skolem-typepred)
                                (("2"
                                  (lemma "finite_universe")
                                  (("2"
                                    (lemma
                                     "finite_subset[D]"
                                     ("A" "fullset[D]" "s" "x!1"))
                                    (("1"
                                      (expand "subset?")
                                      (("1"
                                        (prop)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -2 2 3)
                                      (("2"
                                        (expand "fullset")
                                        (("2"
                                          (expand "is_finite_type")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skolem-typepred)
        (("3" (lemma "finite_universe")
          (("3" (lemma "finite_subset[D]" ("A" "fullset[D]" "s" "x!1"))
            (("1" (expand "subset?")
              (("1" (prop) (("1" (grind) nil nil)) nil)) nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (powerset_finite3 application-judgement
     "non_empty_finite_set[finite_set[D]]" real_aux nil)
    (nonempty_powerset application-judgement "(nonempty?[set[D]])"
     real_aux nil)
    (powerset_finite application-judgement "finite_set[set[T]]"
     finite_sets_of_sets nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (product def-decl "R" finite_sets_product finite_sets)
    (n_f const-decl "real" real_aux nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum def-decl "R" finite_sets_sum finite_sets)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (powerset const-decl "setofsets" sets nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (D formal-nonempty-type-decl nil real_aux nil)
    (finite_set_induction_rest formula-decl nil finite_sets_inductions
     finite_sets)
    (product_emptyset_rew formula-decl nil finite_sets_product_real
     finite_sets)
    (sum_singleton_rew formula-decl nil finite_sets_sum_real
     finite_sets)
    (empty? const-decl "bool" sets nil)
    (Card_surjection formula-decl nil finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (surjective? const-decl "bool" functions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[D]])"
     real_aux nil)
    (Card_injection formula-decl nil finite_sets nil)
    (card_def formula-decl nil finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (singleton? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (empty_card formula-decl nil finite_sets nil)
    (empty_powerset formula-decl nil sets_lemmas nil)
    (finite_subset formula-decl nil finite_sets nil)
    (fullset const-decl "set" sets nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (finite_universe formula-decl nil real_aux nil)
    (emptyset const-decl "set" sets nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[D]" real_aux nil)
    (finite_rest application-judgement "finite_set[D]" real_aux nil)
    (powerset_rew formula-decl nil powerset_aux nil)
    (nonempty? const-decl "bool" sets nil)
    (sum_mult formula-decl nil finite_sets_sum_real finite_sets)
    (rest const-decl "set" sets nil) (choose const-decl "(p)" sets nil)
    (sum_map_dom formula-decl nil finite_sum_aux nil)
    (add const-decl "(nonempty?)" sets nil)
    (O const-decl "T3" function_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (finite_add formula-decl nil finite_sets nil)
    (neg_times_neg formula-decl nil real_props nil)
    (odd? const-decl "bool" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (card_add formula-decl nil finite_sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (remove const-decl "set" sets nil)
    (finite_remove application-judgement "finite_set[D]" real_aux nil)
    (product_add formula-decl nil finite_sets_product finite_sets)
    (sum_eq_funs formula-decl nil finite_sets_sum_real finite_sets)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (e15_16_3 formula-decl nil real_aux nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sum_eq_doms formula-decl nil finite_sum_aux2 nil)
    (finite_intersection2 application-judgement "finite_set[set[D]]"
     real_aux nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (image const-decl "set[R]" function_image nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (sum_disj_union formula-decl nil finite_sets_sum finite_sets)
    (finite_image application-judgement "finite_set[R]"
     function_image_aux nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (finite_union application-judgement "finite_set[set[D]]" real_aux
     nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (product_rest formula-decl nil finite_sets_product finite_sets)
    (non_empty_finite_set type-eq-decl nil finite_sets nil))
   nil)
  (e15_16-1 nil 3886832201
   ("" (induct "A" :name "finite_set_induction_rest[D]")
    (("1" (skosimp)
      (("1" (lemma "product_emptyset_rew")
        (("1" (inst?)
          (("1"
            (lemma "sum_singleton_rew"
             ("S" "powerset(emptyset[D])" "t" "emptyset[D]" "f"
              "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)"))
            (("1" (lemma "empty_powerset[D]" ("a" "emptyset[D]"))
              (("1" (replace -3 * lr t)
                (("1" (lemma "empty_card[D]")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (case "empty?(emptyset[D])")
                        (("1" (assert)
                          (("1"
                            (lemma "product_emptyset_rew"
                             ("S" "emptyset[D]" "f" "f!1"))
                            (("1" (ground)
                              (("1"
                                (replace -1 * lr t)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (hide - 2)
                                (("2"
                                  (lemma
                                   "card_def"
                                   ("S"
                                    "sets[D].powerset(sets[D].emptyset)"))
                                  (("2"
                                    (replace -1 * lr t)
                                    (("2"
                                      (lemma "Card_injection[set[D]]")
                                      (("2"
                                        (lemma
                                         "Card_surjection[set[D]]")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (inst? -2)
                                            (("2"
                                              (ground)
                                              (("2"
                                                (inst -1 "1")
                                                (("2"
                                                  (inst -2 "1")
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (inst
                                                       1
                                                       "lambda (z: (powerset(emptyset[D]))): 0")
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (expand
                                                           "injective?")
                                                          (("1"
                                                            (skolem-typepred)
                                                            (("1"
                                                              (expand
                                                               "powerset")
                                                              (("1"
                                                                (expand
                                                                 "subset?")
                                                                (("1"
                                                                  (expand
                                                                   "emptyset")
                                                                  (("1"
                                                                    (expand
                                                                     "member")
                                                                    (("1"
                                                                      (apply-extensionality
                                                                       1
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       1
                                                       "lambda (z: (powerset(emptyset[D]))): 0")
                                                      (("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (skolem-typepred)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (inst
                                                       2
                                                       "lambda (z: (powerset(emptyset[D]))): 0")
                                                      (("3"
                                                        (hide 1 3)
                                                        (("3"
                                                          (expand
                                                           "surjective?")
                                                          (("3"
                                                            (skolem-typepred)
                                                            (("3"
                                                              (inst
                                                               1
                                                               "sets[D].emptyset")
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide - 2)
              (("2" (skolem-typepred)
                (("2" (lemma "finite_universe")
                  (("2"
                    (lemma "finite_subset[D]"
                     ("A" "fullset[D]" "s" "x!1"))
                    (("1" (expand "subset?")
                      (("1" (prop) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem-typepred)
      (("2" (prop)
        (("2" (skolem-typepred)
          (("2" (inst?)
            (("2" (lemma "product_rest" ("S" "SS!1" "f" "n_f(f!1)"))
              (("2" (assert)
                (("2" (replace -1 * rl t)
                  (("2" (replace -2 * lr t)
                    (("2" (expand "n_f")
                      (("2" (lemma "powerset_rew[D]" ("A" "SS!1"))
                        (("2" (replace -1 * rl t)
                          (("2"
                            (lemma "sum_mult"
                             ("S" "powerset(rest(SS!1))" "c"
                              "f!1(choose(SS!1))" "f"
                              "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)"))
                            (("1" (replace -1 * rl t)
                              (("1"
                                (lemma
                                 "sum_map_dom"
                                 ("X"
                                  "powerset(rest(SS!1))"
                                  "f"
                                  "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)"
                                  "g"
                                  "LAMBDA (G: set[D]): add(choose(SS!1), G)"))
                                (("1"
                                  (ground)
                                  (("1"
                                    (expand "o")
                                    (("1"
                                      (lemma
                                       "sum_disj_union"
                                       ("A"
                                        "powerset(rest(SS!1))"
                                        "B"
                                        "extend[setof[D], (nonempty?[D]), bool, FALSE]
                     (image(LAMBDA (G: set[D]): add(choose(SS!1), G), powerset(rest(SS!1))))"
                                        "f"
                                        "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)"))
                                      (("1"
                                        (ground)
                                        (("1"
                                          (replace -1 * lr t)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (lemma
                                               "sum_eq_doms"
                                               ("A"
                                                "(function_image[sets[D].set, sets[D].set].image
                     (LAMBDA (G: sets[D].set):
                        sets[D].add(sets[D].choose(SS!1), G),
                      sets[D].powerset(sets[D].rest(SS!1))))"
                                                "B"
                                                "extend
                    [defined_types[D].setof, (sets[D].nonempty?),
                     booleans.bool, booleans.FALSE].extend
                    (function_image[sets[D].set, (sets[D].nonempty?)].image
                         (LAMBDA (G: sets[D].set):
                            sets[D].add(sets[D].choose(SS!1), G),
                          sets[D].powerset(sets[D].rest(SS!1))))"
                                                "f"
                                                "LAMBDA B: (-1) ^ (card(B)) * product(B, f!1)"))
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replace -1 * lr t)
                                                  (("1"
                                                    (replace -1 * rl t)
                                                    (("1"
                                                      (lemma
                                                       "e15_16_3"
                                                       ("A"
                                                        "SS!1"
                                                        "f"
                                                        "f!1"))
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (lemma
                                                           "sum_eq_funs"
                                                           ("S"
                                                            "powerset(rest(SS!1))"
                                                            "f"
                                                            "LAMBDA B:
             (f!1(choose(SS!1)) * (-1) ^ (1 + card(B))) * product(B, f!1)"
                                                            "g"
                                                            "LAMBDA (x: set[D]):
             (-1) ^ (card(add(choose(SS!1), x))) *
              product(add(choose(SS!1), x), f!1)"))
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               *
                                                               lr
                                                               t)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 *
                                                                 rl
                                                                 t)
                                                                (("1"
                                                                  (both-sides
                                                                   "*"
                                                                   "-1"
                                                                   2)
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (lemma
                                                                       "sum_eq_funs"
                                                                       ("S"
                                                                        "powerset(rest(SS!1))"
                                                                        "f"
                                                                        "LAMBDA B:
             f!1(choose(SS!1)) * (-1) ^ (card(B)) * product(B, f!1)"
                                                                        "g"
                                                                        "LAMBDA (t: set[D]): f!1(choose(SS!1)) * ((-1) ^ (card(t)) * product(t, f!1))"))
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     3)
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 3)
                                                              (("2"
                                                                (skolem-typepred)
                                                                (("2"
                                                                  (hide
                                                                   -2)
                                                                  (("2"
                                                                    (lemma
                                                                     "card_add"
                                                                     ("x"
                                                                      "choose(SS!1)"
                                                                      "S"
                                                                      "t!1"))
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (ground)
                                                                        (("1"
                                                                          (hide
                                                                           -2
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "powerset")
                                                                            (("1"
                                                                              (expand
                                                                               "subset?")
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "choose(SS!1)")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -1
                                                                           *
                                                                           lr
                                                                           t)
                                                                          (("2"
                                                                            (lemma
                                                                             "product_add"
                                                                             ("x"
                                                                              "choose(SS!1)"
                                                                              "S"
                                                                              "t!1"
                                                                              "f"
                                                                              "f!1"))
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               *
                                                                               lr
                                                                               t)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (ground)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 3 -1)
                                                            (("2"
                                                              (skolem-typepred)
                                                              (("2"
                                                                (lemma
                                                                 "finite_universe")
                                                                (("2"
                                                                  (lemma
                                                                   "finite_subset[D]"
                                                                   ("A"
                                                                    "fullset[D]"
                                                                    "s"
                                                                    "x!1"))
                                                                  (("1"
                                                                    (expand
                                                                     "subset?")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (lemma
                                                                         "finite_add"
                                                                         ("x"
                                                                          "choose[D](SS!1)"
                                                                          "A"
                                                                          "x!1"))
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -2
                                                                     2
                                                                     3)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "sum_mult"
                                                           ("S"
                                                            "powerset(rest(SS!1))"
                                                            "c"
                                                            "-1"
                                                            "f"
                                                            "LAMBDA (t: set[D]):
             f!1(choose(SS!1)) * ((-1) ^ (card(t)) * product(t, f!1))"))
                                                          (("2"
                                                            (replace
                                                             -1
                                                             *
                                                             rl
                                                             t)
                                                            (("2"
                                                              (beta 3)
                                                              (("2"
                                                                (lemma
                                                                 "sum_eq_funs"
                                                                 ("S"
                                                                  "powerset(rest(SS!1))"
                                                                  "f"
                                                                  "LAMBDA (t_1: set[D]):
            -1 *
             (f!1(choose(SS!1)) *
               ((-1) ^ (card(t_1)) * product(t_1, f!1)))"
                                                                  "g"
                                                                  "LAMBDA (x: set[D]):
             (-1) ^ (card(add(choose(SS!1), x))) *
              product(add(choose(SS!1), x), f!1)"))
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (hide
                                                                     4)
                                                                    (("1"
                                                                      (skolem-typepred)
                                                                      (("1"
                                                                        (lemma
                                                                         "product_add"
                                                                         ("x"
                                                                          "choose(SS!1)"
                                                                          "S"
                                                                          "t!1"
                                                                          "f"
                                                                          "f!1"))
                                                                        (("1"
                                                                          (lemma
                                                                           "card_add"
                                                                           ("x"
                                                                            "choose(SS!1)"
                                                                            "S"
                                                                            "t!1"))
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             *
                                                                             lr
                                                                             t)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               *
                                                                               lr
                                                                               t)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (hide
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "powerset")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "subset?")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -2
                                                                                           "choose(SS!1)")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (ground)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   4)
                                                                  (("2"
                                                                    (skolem-typepred)
                                                                    (("2"
                                                                      (lemma
                                                                       "finite_universe")
                                                                      (("2"
                                                                        (lemma
                                                                         "finite_subset[D]"
                                                                         ("A"
                                                                          "fullset[D]"
                                                                          "s"
                                                                          "x!1"))
                                                                        (("1"
                                                                          (expand
                                                                           "subset?")
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (lemma
                                                                               "finite_add"
                                                                               ("x"
                                                                                "choose[D](SS!1)"
                                                                                "A"
                                                                                "x!1"))
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "finite_add"
                                                                               ("x"
                                                                                "choose[D](SS!1)"
                                                                                "A"
                                                                                "x!1"))
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "finite_add"
                                                                           ("x"
                                                                            "choose[D](SS!1)"
                                                                            "A"
                                                                            "x!1"))
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 3)
                                                  (("2"
                                                    (expand "image")
                                                    (("2"
                                                      (expand "extend")
                                                      (("2"
                                                        (apply-extensionality
                                                         1
                                                         :hide?
                                                         t)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("2"
                                                              (skolem-typepred)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 3)
                                          (("2"
                                            (expand "disjoint?")
                                            (("2"
                                              (expand "intersection")
                                              (("2"
                                                (expand "empty?")
                                                (("2"
                                                  (skolem-typepred)
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (expand
                                                       "powerset")
                                                      (("2"
                                                        (expand
                                                         "image")
                                                        (("2"
                                                          (expand
                                                           "subset?")
                                                          (("2"
                                                            (expand
                                                             "extend")
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (skolem-typepred)
                                                                (("2"
                                                                  (inst
                                                                   -4
                                                                   "choose(SS!1)")
                                                                  (("2"
                                                                    (ground)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 3)
                                    (("2"
                                      (expand "injective?")
                                      (("2"
                                        (skolem-typepred)
                                        (("2"
                                          (expand "restrict")
                                          (("2"
                                            (expand "add")
                                            (("2"
                                              (expand "powerset")
                                              (("2"
                                                (expand "subset?")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (apply-extensionality
                                                       1
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (inst -1 "x!1")
                                                        (("2"
                                                          (inst
                                                           -2
                                                           "x!1")
                                                          (("2"
                                                            (case
                                                             "choose(SS!1) = x!1")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               *
                                                               lr)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (hide
                                                                   -4
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -4
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide
                                                                   -4
                                                                   1)
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (ground)
                                                              (("1"
                                                                (decompose-equality
                                                                 -3)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x!1")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (decompose-equality
                                                                 -3)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "x!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (decompose-equality
                                                                 -3)
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "x!1")
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2"
                                (skolem-typepred)
                                (("2"
                                  (lemma "finite_universe")
                                  (("2"
                                    (lemma
                                     "finite_subset[D]"
                                     ("A" "fullset[D]" "s" "x!1"))
                                    (("1"
                                      (expand "subset?")
                                      (("1"
                                        (prop)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -2 2 3)
                                      (("2"
                                        (expand "fullset")
                                        (("2"
                                          (expand "is_finite_type")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skolem-typepred)
        (("3" (lemma "finite_universe")
          (("3" (lemma "finite_subset[D]" ("A" "fullset[D]" "s" "x!1"))
            (("1" (expand "subset?")
              (("1" (prop) (("1" (grind) nil nil)) nil)) nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_set type-eq-decl nil finite_sets nil)
    (product def-decl "R" finite_sets_product finite_sets)
    (sum def-decl "R" finite_sets_sum finite_sets)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set_induction_rest formula-decl nil finite_sets_inductions
     finite_sets)
    (product_emptyset_rew formula-decl nil finite_sets_product_real
     finite_sets)
    (sum_singleton_rew formula-decl nil finite_sets_sum_real
     finite_sets)
    (Card_surjection formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (Card_injection formula-decl nil finite_sets nil)
    (card_def formula-decl nil finite_sets nil)
    (empty_card formula-decl nil finite_sets nil)
    (empty_powerset formula-decl nil sets_lemmas nil)
    (finite_subset formula-decl nil finite_sets nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (powerset_rew formula-decl nil powerset_aux nil)
    (sum_mult formula-decl nil finite_sets_sum_real finite_sets)
    (sum_map_dom formula-decl nil finite_sum_aux nil)
    (finite_add formula-decl nil finite_sets nil)
    (card_add formula-decl nil finite_sets nil)
    (product_add formula-decl nil finite_sets_product finite_sets)
    (sum_eq_funs formula-decl nil finite_sets_sum_real finite_sets)
    (sum_eq_doms formula-decl nil finite_sum_aux2 nil)
    (sum_disj_union formula-decl nil finite_sets_sum finite_sets)
    (product_rest formula-decl nil finite_sets_product finite_sets)
    (non_empty_finite_set type-eq-decl nil finite_sets nil))
   shostak)))

