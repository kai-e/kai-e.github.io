(powerset_aux
 (disjoint_choose_rest 0
  (disjoint_choose_rest-1 nil 3886833304 ("" (grind) nil nil)
   ((nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil powerset_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (rest const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (restrict const-decl "R" restrict nil)
    (/= const-decl "boolean" notequal nil)
    (remove const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil))
   shostak))
 (union_choose_rest 0
  (union_choose_rest-1 nil 3886833347 ("" (grind-with-ext) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil powerset_aux nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (/= const-decl "boolean" notequal nil)
    (remove const-decl "set" sets nil)
    (restrict const-decl "R" restrict nil)
    (choose const-decl "(p)" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (rest const-decl "set" sets nil))
   shostak))
 (add_choose_rest 0
  (add_choose_rest-1 nil 3886837817 ("" (grind-with-ext) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil powerset_aux nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (add const-decl "(nonempty?)" sets nil)
    (choose const-decl "(p)" sets nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (rest const-decl "set" sets nil))
   shostak))
 (powerset_finite2 0
  (powerset_finite2-2 nil 3886959211
   ("" (skolem-typepred)
    (("" (ground)
      (("1" (skolem-typepred)
        (("1" (expand "powerset")
          (("1" (lemma "finite_subset[T]") (("1" (grind) nil nil))
            nil))
          nil))
        nil)
       ("2" (expand "is_finite")
        (("2" (skolem-typepred)
          (("2" (inst 1 "exp2(card(B!1))" "powerset_natfun(B!1)")
            (("2" (expand "injective?")
              (("2" (lemma "powerset_natfun_inj[T]")
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_powerset application-judgement "(nonempty?[set[T]])"
     sets_lemmas nil)
    (powerset_finite application-judgement "finite_set[set[T]]"
     finite_sets_of_sets nil)
    (powerset const-decl "setofsets" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_subset formula-decl nil finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (powerset_natfun_inj formula-decl nil finite_sets_of_sets nil)
    (powerset_natfun const-decl "below(exp2(card(A)))"
     finite_sets_of_sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil powerset_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (powerset_finite2 subtype
    "sets[powerset_aux.T].powerset(powerset_aux.B)"
    "finite_set[finite_set[T]]"))
  (powerset_finite2-1 nil 3886833905
   ("" (skolem-typepred)
    (("" (ground)
      (("1" (skolem-typepred)
        (("1" (expand "powerset")
          (("1" (lemma "finite_subset" ("s" "x!1" "A" "A!1"))
            (("1" (propax) nil nil)) nil))
          nil))
        nil)
       ("2" (expand "is_finite")
        (("2" (skolem-typepred)
          (("2" (inst 1 "exp2(card(A!1))" "powerset_natfun(A!1)")
            (("2" (expand "injective?")
              (("2" (lemma "powerset_natfun_inj[T]")
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (powerset_finite2 subtype
    "sets[powerset_aux.T].powerset(powerset_aux.B)"
    "finite_set[finite_set[T]]")))
 (powerset_finite3 0
  (powerset_finite3-1 nil 3886959129 ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil powerset_aux nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (powerset const-decl "setofsets" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty_powerset application-judgement "(nonempty?[set[T]])"
     sets_lemmas nil)
    (powerset_finite2 application-judgement "finite_set[finite_set[T]]"
     powerset_aux nil)
    (powerset_finite application-judgement "finite_set[set[T]]"
     finite_sets_of_sets nil))
   nil
   (powerset_finite3 subtype
    "sets[powerset_aux.T].powerset(powerset_aux.B)"
    "non_empty_finite_set[finite_set[T]]")))
 (powerset_im_add_c2pr_disjoint 0
  (powerset_im_add_c2pr_disjoint-1 nil 3886959431
   ("" (skolem-typepred)
    (("" (expand "disjoint?")
      (("" (expand "empty?")
        (("" (skolem-typepred)
          (("" (expand "intersection")
            (("" (expand "member")
              (("" (expand "powerset")
                (("" (expand "image")
                  (("" (expand "extend")
                    (("" (expand "subset?")
                      (("" (ground)
                        (("" (skolem-typepred)
                          (("" (lemma "choose_not_member[T]")
                            (("" (inst -1 "A!1")
                              ((""
                                (expand "add")
                                ((""
                                  (inst -6 "choose(A!1)")
                                  (("" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((disjoint? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (image const-decl "set[R]" function_image nil)
    (subset? const-decl "bool" sets nil)
    (rest const-decl "set" sets nil) (choose const-decl "(p)" sets nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (add const-decl "(nonempty?)" sets nil)
    (choose_not_member formula-decl nil sets_lemmas nil)
    (extend const-decl "R" extend nil)
    (powerset const-decl "setofsets" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil powerset_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (powerset_rew 0
  (powerset_rew-1 nil 3886816816
   ("" (skolem-typepred)
    (("" (apply-extensionality :hide? t)
      (("" (iff)
        (("" (ground)
          (("1" (expand "union")
            (("1" (ground)
              (("1" (expand "member")
                (("1" (expand "powerset")
                  (("1" (expand "subset?")
                    (("1" (skosimp)
                      (("1" (expand "member") (("1" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "member")
                (("2" (expand "powerset")
                  (("2" (expand "extend")
                    (("2" (ground)
                      (("2" (expand "image")
                        (("2" (skolem-typepred)
                          (("2" (expand "add")
                            (("2" (expand "subset?")
                              (("2"
                                (skolem-typepred)
                                (("2"
                                  (ground)
                                  (("2"
                                    (expand "member")
                                    (("2"
                                      (replace -3 * LR)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "image")
            (("2" (expand "extend")
              (("2" (expand "powerset")
                (("2" (expand "union")
                  (("2" (case "member(choose(A!1),x!1)")
                    (("1" (ground)
                      (("1" (expand "member")
                        (("1" (ground)
                          (("1"
                            (lemma "add_remove_member[T]"
                             ("x" "choose(A!1)" "a" "x!1"))
                            (("1" (expand "member")
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (expand "powerset")
                                  (("2"
                                    (expand "subset?")
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (skolem-typepred)
                                        (("2"
                                          (ground)
                                          (("2"
                                            (expand "rest")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground)
                      (("2" (expand "member")
                        (("2" (expand "subset?")
                          (("2" (skosimp 2)
                            (("2" (inst?)
                              (("2"
                                (lemma "choose_rest_or[T]")
                                (("2"
                                  (inst -1 "A!1" "x!2")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((choose const-decl "(p)" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (image const-decl "set[R]" function_image nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (rest const-decl "set" sets nil)
    (powerset const-decl "setofsets" sets nil)
    (setofsets type-eq-decl nil sets nil)
    (union const-decl "set" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (nonempty_powerset application-judgement "(nonempty?[set[T]])"
     sets_lemmas nil)
    (empty? const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (remove const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (choose_rest_or formula-decl nil sets_lemmas nil)
    (x!1 skolem-const-decl "[T -> boolean]" powerset_aux nil)
    (A!1 skolem-const-decl "(nonempty?[T])" powerset_aux nil)
    (add_remove_member formula-decl nil sets_lemmas nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil powerset_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (nv_sub_ss_powerset 0
  (nv_sub_ss_powerset-3 "" 3886960229
   ("" (skolem-typepred)
    (("" (expand "remove")
      (("" (apply-extensionality 1 :hide? t)
        (("" (iff)
          (("" (expand "nv_sub_ss")
            (("" (expand "extend")
              (("" (expand "member")
                (("" (expand "powerset")
                  (("" (expand "emptyset")
                    (("" (expand "nonempty?")
                      (("" (expand "empty?")
                        (("" (expand "subset?")
                          (("" (expand "member")
                            (("" (ground)
                              ((""
                                (apply-extensionality 1 :hide? t)
                                (("" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove const-decl "set" sets nil)
    (extend const-decl "R" extend nil)
    (subset? const-decl "bool" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (empty? const-decl "bool" sets nil)
    (nonempty_powerset application-judgement "(nonempty?[set[T]])"
     sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (setofsets type-eq-decl nil sets nil)
    (powerset const-decl "setofsets" sets nil)
    (nv_sub_ss const-decl "set[set[T]]" powerset_aux nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil powerset_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)
  (nv_sub_ss_powerset-2 nil 3886960199
   ("" (skosimp)
    (("" (expand "remove")
      (("" (expand "extend")
        (("" (apply-extensionality 1 :hide? t)
          (("" (iff)
            (("" (ground)
              (("1" (expand "nv_sub_ss")
                (("1" (expand "member")
                  (("1" (expand "powerset")
                    (("1" (ground)
                      (("1" (expand "nonempty?")
                        (("1" (lemma "emptyset_is_empty?[T]")
                          (("1" (grind) nil)))))))))))))
               ("2" (typepred "B!1")
                (("2" (lemma "subset_powerset[T]")
                  (("2" (inst -1 "x!1" "B!1")
                    (("2" (assert)
                      (("2" (lemma "finite_subset[T]")
                        (("2" (inst?) (("2" (assert) nil)))))))))))))
               ("3" (expand "nv_sub_ss")
                (("3" (lemma "emptyset_is_empty?[T]")
                  (("3" (inst -1 "x!1")
                    (("3" (expand "nonempty?")
                      (("3" (assert) nil)))))))))
               ("4" (grind) nil))))))))))))
    nil)
   nil nil)
  (nv_sub_ss_powerset-1 nil 3886816165
   ("" (skosimp)
    (("" (expand "remove")
      (("" (expand "extend")
        (("" (apply-extensionality 1 :hide? t)
          (("" (iff)
            (("" (ground)
              (("1" (expand "nv_sub_ss")
                (("1" (expand "member")
                  (("1" (expand "powerset")
                    (("1" (ground)
                      (("1" (expand "nonempty?")
                        (("1" (lemma "emptyset_is_empty?[T]")
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "A!1")
                (("2" (lemma "subset_powerset[T]")
                  (("2" (inst -1 "x!1" "A!1")
                    (("2" (assert)
                      (("2" (lemma "finite_subset[T]")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "nv_sub_ss")
                (("3" (lemma "emptyset_is_empty?[T]")
                  (("3" (inst -1 "x!1")
                    (("3" (expand "nonempty?") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (nv_sub_ss_finite 0
  (nv_sub_ss_finite-1 nil 3887838954
   ("" (skolem-typepred)
    (("" (case "subset?(nv_sub_ss(B!1),powerset(B!1))")
      (("1" (ground)
        (("1" (skolem-typepred)
          (("1" (ground)
            (("1" (expand "subset?")
              (("1" (inst -2 "x!1")
                (("1" (ground)
                  (("1" (expand "member")
                    (("1" (lemma "powerset_finite2")
                      (("1" (inst?)
                        (("1" (ground)
                          (("1" (inst?) (("1" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "powerset_finite2")
          (("2" (inst -1 "B!1")
            (("2" (ground)
              (("2" (lemma "finite_subset[finite_set[T]]")
                (("2" (postpone) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -1 2) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   nil nil
   (nv_sub_ss_finite subtype "powerset_aux.nv_sub_ss(powerset_aux.B)"
    "finite_set[finite_set[T]]")))
 (nv_sub_ss_rest 0
  (nv_sub_ss_rest-1 nil 3886816545
   ("" (skosimp)
    (("" (apply-extensionality :hide? t)
      (("" (iff)
        (("" (ground)
          (("1" (expand "union")
            (("1" (ground)
              (("1" (expand "member")
                (("1" (expand "nv_sub_ss")
                  (("1" (expand "subset?")
                    (("1" (expand "member")
                      (("1" (expand "extend")
                        (("1" (ground)
                          (("1" (lemma "rest_subset[T]")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "image")
                (("2" (expand "member")
                  (("2" (expand "nv_sub_ss")
                    (("2" (expand "extend")
                      (("2" (ground)
                        (("2"
                          (lemma "add_remove_member[T]"
                           ("x" "choose(A!1)" "a" "x!1"))
                          (("2" (ground)
                            (("1" (expand "subset?")
                              (("1"
                                (skolem-typepred)
                                (("1"
                                  (expand "member")
                                  (("1"
                                    (skolem-typepred)
                                    (("1"
                                      (ground)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "union")
            (("2" (expand "nv_sub_ss")
              (("2" (case "member(choose(A!1),x!1)")
                (("1" (ground)
                  (("1" (expand "member")
                    (("1" (expand "extend")
                      (("1" (ground)
                        (("1" (expand "image")
                          (("1"
                            (lemma "add_remove_member[T]"
                             ("x" "choose(A!1)" "a" "x!1"))
                            (("1" (ground)
                              (("1"
                                (inst 1 "remove(choose(A!1), x!1)")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (expand "powerset")
                                  (("2"
                                    (expand "subset?")
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (skolem-typepred)
                                        (("2"
                                          (ground)
                                          (("2"
                                            (expand "rest")
                                            (("2"
                                              (expand "remove")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (ground)
                  (("2" (expand "member")
                    (("2" (expand "subset?")
                      (("2" (expand "extend")
                        (("2" (ground)
                          (("2" (expand "image")
                            (("2" (case "member(choose(A!1),x!1)")
                              (("1"
                                (lemma
                                 "add_remove_member[T]"
                                 ("x" "choose(A!1)" "a" "x!1"))
                                (("1" (ground) nil nil))
                                nil)
                               ("2"
                                (skolem-typepred)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil powerset_aux nil)
    (boolean nonempty-type-decl nil booleans nil)
    (powerset const-decl "setofsets" sets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (choose const-decl "(p)" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (image const-decl "set[R]" function_image nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (rest const-decl "set" sets nil)
    (nv_sub_ss const-decl "set[set[T]]" powerset_aux nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nonempty_powerset application-judgement "(nonempty?[set[T]])"
     sets_lemmas nil)
    (empty? const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (remove const-decl "set" sets nil)
    (rest_subset formula-decl nil sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (add_remove_member formula-decl nil sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (A!1 skolem-const-decl "(nonempty?[T])" powerset_aux nil)
    (x!1 skolem-const-decl "[T -> boolean]" powerset_aux nil))
   shostak)))

