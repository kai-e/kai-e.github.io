(p96
 (FFS_TCC1 0
  (FFS_TCC1-1 nil 3888905413 ("" (assuming-tcc) nil nil)
   ((restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil))
   nil
   (FFS assuming
    "finite_sets@finite_sets_sum[finite_set[finite_set[T]], real, 0, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+)].finite_sets_sum"
    "zero_identity: ASSUMPTION operator_defs[finite_sets_sum.R].identity?(finite_sets_sum.+)(finite_sets_sum.zero)")))
 (FFS_TCC2 0
  (FFS_TCC2-1 nil 3888905413 ("" (assuming-tcc) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (associative? const-decl "bool" operator_defs nil)
    (commutative? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil))
   nil
   (FFS assuming
    "finite_sets@finite_sets_sum[finite_set[finite_set[T]], real, 0, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+)].finite_sets_sum"
    "plus_ac: ASSUMPTION booleans.AND(operator_defs[finite_sets_sum.R].associative?(finite_sets_sum.+), operator_defs[finite_sets_sum.R].commutative?(finite_sets_sum.+))")))
 (IMP_real_aux_TCC1 0
  (IMP_real_aux_TCC1-1 nil 3888598211
   ("" (lemma "finite_universe[T]")
    (("" (lemma "powerset_finite2[T]")
      (("" (expand "is_finite_type")
        (("" (inst -1 "fullset[T]")
          (("1" (prop)
            (("1" (expand "is_finite")
              (("1" (skolem-typepred)
                (("1" (inst 1 "N!1" "f!1")
                  (("1" (grind) nil nil)
                   ("2" (skolem-typepred)
                    (("2" (expand "powerset")
                      (("2" (expand "subset?")
                        (("2" (ground)
                          (("1" (inst -3 "x!1")
                            (("1" (prop)
                              (("1"
                                (ground)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil p96 nil)
    (powerset_finite2 judgement-tcc nil powerset_aux nil)
    (fullset const-decl "set" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (setof type-eq-decl nil defined_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (setofsets type-eq-decl nil sets nil)
    (powerset const-decl "setofsets" sets nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (finite_universe formula-decl nil p96 nil))
   nil
   (IMP_real_aux assuming "real_aux[finite_set[T]].real_aux"
    "finite_universe: ASSUMPTION finite_sets[real_aux.D].is_finite_type")))
 (altcard_TCC1 0
  (altcard_TCC1-1 nil 3889242994
   ("" (skolem-typepred)
    (("" (lemma "finite_universe")
      (("" (lemma "finite_subset[T]")
        ((""
          (inst -1 "fullset[T]" "Intersection[T]
               (extend[setof[T], finite_set[T], bool, FALSE](B!1))")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (expand "subset?")
                (("1" (skolem-typepred)
                  (("1" (ground)
                    (("1" (expand "member")
                      (("1" (expand "fullset") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "is_finite_type")
              (("2" (expand "fullset") (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_universe formula-decl nil p96 nil)
    (fullset const-decl "set" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (Intersection const-decl "set" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" p96 nil)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     p96 nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (finite_subset formula-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil p96 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (altcard subtype
    "sets[p96.T].Intersection(extend[setof[T], finite_set[T], booleans.bool, booleans.FALSE].extend(p96.B))"
    "finite_set[T]")))
 (e15_22_1_TCC1 0
  (e15_22_1_TCC1-1 nil 3889242994
   ("" (skolem-typepred)
    (("" (ground)
      (("" (lemma "finite_universe")
        (("" (lemma "finite_subset[T]")
          ((""
            (inst -1 "fullset[T]"
             "Union[T](extend[setof[T], finite_set[T], bool, FALSE](A!1))")
            (("1" (grind) nil nil)
             ("2" (hide 3)
              (("2" (expand "is_finite_type")
                (("2" (expand "fullset")
                  (("2" (hide -2 -3 -4 2)
                    (("2" (expand "is_finite") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" p96 nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (finite_subset formula-decl nil finite_sets nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     p96 nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (Union const-decl "set" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (fullset const-decl "set" sets nil)
    (finite_universe formula-decl nil p96 nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil p96 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (e15_22_1 subtype
    "sets[p96.T].Union(extend[setof[T], finite_set[T], booleans.bool, booleans.FALSE].extend(p96.A))"
    "finite_set[T]")))
 (e15_22_1 0
  (e15_22_1-1 nil 3887087638
   ("" (skolem-typepred)
    (("" (ground)
      (("" (lemma "M_D_sum")
        (("" (inst -1 "D!1" "Union(A!1)")
          (("" (ground)
            (("" (hide 3)
              (("" (expand "subset?")
                (("" (skolem-typepred)
                  (("" (ground)
                    (("" (expand "Union")
                      (("" (expand "member")
                        (("" (skolem-typepred)
                          (("" (expand "extend") (("" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" p96 nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (nil application-judgement "nat" p96 nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (Union const-decl "set" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     p96 nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (M_D_sum formula-decl nil M_D_aux nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil p96 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (e15_22_2 0
  (e15_22_2-1 nil 3887403016
   ("" (skolem-typepred)
    (("" (ground)
      ((""
        (lemma "sum_f_g"
         ("S" "D!1" "f" "M_D(Union(A!1))" "g"
          "LAMBDA x: 1 - product(A!1, LAMBDA a: neg_M_D(a)(x))"))
        (("" (ground)
          (("" (hide 3)
            (("" (skolem-typepred)
              (("" (expand "neg_M_D")
                (("" (expand "M_D")
                  (("" (expand "o ")
                    (("" (expand "b2n")
                      (("" (expand "Union")
                        (("" (lift-if)
                          (("" (ground)
                            (("1" (skolem-typepred)
                              (("1"
                                (expand "extend")
                                (("1"
                                  (ground)
                                  (("1"
                                    (lemma
                                     "product_remove[finite_set[T],real,1,*]")
                                    (("1"
                                      (inst
                                       -1
                                       "A!1"
                                       "LAMBDA a: IF (NOT)(a(x!1)) THEN 1 ELSE 0 ENDIF"
                                       "a!1")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "member")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (case "FORALL (a: (A!1)): NOT a(x!1)")
                              (("1"
                                (hide 1)
                                (("1"
                                  (lemma
                                   "product_eq_funs[finite_set[T]]")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst -1 "lambda a: 1")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (replace -1 * lr t)
                                          (("1"
                                            (lemma
                                             "product_const[finite_set[T]]")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (replace -1 * lr t)
                                                (("1"
                                                  (lemma "expt_1i")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skolem-typepred)
                                          (("2"
                                            (inst? -3)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skolem-typepred)
                                (("2"
                                  (inst? 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "nat" p96 nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" p96 nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (nil application-judgement "int" p96 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (product_nat application-judgement "nat" p96 nil)
    (b2n const-decl "nbit" bit nil)
    (product_eq_funs formula-decl nil finite_sets_product_real
     finite_sets)
    (expt_1i formula-decl nil exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (injective? const-decl "bool" functions nil)
    (subset? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (product_const formula-decl nil finite_sets_product_real
     finite_sets)
    (A!1 skolem-const-decl "finite_set[finite_set[T]]" p96 nil)
    (a!1 skolem-const-decl "(A!1)" p96 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (member const-decl "bool" sets nil)
    (finite_remove application-judgement "finite_set[finite_set[T]]"
     p96 nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (product_remove formula-decl nil finite_sets_product finite_sets)
    (O const-decl "T3" function_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sum_f_g formula-decl nil finite_sets_sum finite_sets)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (nbit type-eq-decl nil bit nil)
    (M_D const-decl "[T -> nbit]" M_D_aux nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (Union const-decl "set" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (product def-decl "R" finite_sets_product finite_sets)
    (neg_M_D const-decl "[T -> nbit]" M_D_aux nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil p96 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (e15_22_3 0
  (e15_22_3-1 nil 3887402391
   ("" (skolem-typepred)
    (("" (ground)
      (("" (lemma "e15_16")
        (("" (inst?)
          (("" (expand "n_f")
            (("" (expand "neg_M_D")
              (("" (expand "o ")
                (("" (expand "b2n")
                  (("" (replace -1 * rl t)
                    (("" (lemma "product_f_g")
                      (("" (inst?)
                        (("" (ground)
                          (("" (skolem-typepred)
                            (("" (hide 3) (("" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((product_nat application-judgement "nat" p96 nil)
    (nil application-judgement "int" p96 nil)
    (powerset_finite application-judgement "finite_set[set[T]]"
     finite_sets_of_sets nil)
    (powerset_finite3 application-judgement
     "non_empty_finite_set[finite_set[finite_set[T]]]" p96 nil)
    (nonempty_powerset application-judgement
     "(nonempty?[set[finite_set[T]]])" p96 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (nbit type-eq-decl nil bit nil)
    (M_D const-decl "[T -> nbit]" M_D_aux nil)
    (neg_M_D const-decl "[T -> nbit]" M_D_aux nil)
    (b2n const-decl "nbit" bit nil)
    (product_f_g formula-decl nil finite_sets_product finite_sets)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (product_int application-judgement "int" p96 nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (O const-decl "T3" function_props nil)
    (n_f const-decl "real" real_aux nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (e15_16 formula-decl nil real_aux nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil p96 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (e15_22_3b 0
  (e15_22_3b-1 nil 3887416081
   ("" (skolem-typepred)
    (("" (ground)
      (("" (lemma "intersection_is_product3")
        ((""
          (lemma "sum_eq_funs[finite_set[finite_set[T]]]"
           ("S" "powerset(A!1)" "f"
            "LAMBDA B: (-1) ^ (card(B)) * product(B, LAMBDA a: M_D(a)(x!1))"
            "g" "LAMBDA B:
             (-1) ^ (card(B)) *
              M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE](B)))
                 (x!1)"))
          (("" (ground)
            (("" (hide 3)
              (("" (skolem-typepred)
                (("" (inst -2 "t!1" "x!1")
                  (("" (ground)
                    (("" (replace -2 * lr t)
                      (("" (expand "restrict") (("" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "int" p96 nil)
    (powerset_finite application-judgement "finite_set[set[T]]"
     finite_sets_of_sets nil)
    (powerset_finite3 application-judgement
     "non_empty_finite_set[finite_set[finite_set[T]]]" p96 nil)
    (nonempty_powerset application-judgement
     "(nonempty?[set[finite_set[T]]])" p96 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (product_nat application-judgement "nat" p96 nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (Intersection const-decl "set" sets nil)
    (M_D const-decl "[T -> nbit]" M_D_aux nil)
    (nbit type-eq-decl nil bit nil) (< const-decl "bool" reals nil)
    (product def-decl "R" finite_sets_product finite_sets)
    (restrict const-decl "R" restrict nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (powerset const-decl "setofsets" sets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (sum_eq_funs formula-decl nil finite_sets_sum_real finite_sets)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" p96 nil)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (intersection_is_product3 formula-decl nil M_D_aux nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil p96 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (e15_22_4 0
  (e15_22_4-1 nil 3887420576
   ("" (skolem-typepred)
    (("" (ground)
      ((""
        (lemma "sum_distributive2"
         ("A" "D!1" "f" "lambda x: 1" "g" "LAMBDA x:
              FFS.sum(powerset(A!1),
                  LAMBDA B:
                    (-1) ^ (card(B)) *
                     M_D(Intersection(B))(x))"))
        (("" (ground)
          (("" (replace -1 * rl)
            (("" (ground)
              (("" (use "sum_const[T]") (("" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "int" p96 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "int" p96 nil)
    (nil application-judgement "posnat" p96 nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sum_const formula-decl nil finite_sets_sum_real finite_sets)
    (powerset_finite application-judgement "finite_set[set[T]]"
     finite_sets_of_sets nil)
    (powerset_finite3 application-judgement
     "non_empty_finite_set[finite_set[finite_set[T]]]" p96 nil)
    (nonempty_powerset application-judgement
     "(nonempty?[set[finite_set[T]]])" p96 nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sum_distributive2 formula-decl nil finite_sum_aux2 nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum def-decl "R" finite_sets_sum finite_sets)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (powerset const-decl "setofsets" sets nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (< const-decl "bool" reals nil) (nbit type-eq-decl nil bit nil)
    (M_D const-decl "[T -> nbit]" M_D_aux nil)
    (Intersection const-decl "set" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil p96 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (e15_22_5 0
  (e15_22_5-6 "grr" 3889249349
   ("" (skolem-typepred)
    (("" (ground)
      ((""
        (lemma "sum_distributive"
         ("A" "D!1" "f" "LAMBDA (x_1: T):
                      FFS.sum(singleton(emptyset),
                          LAMBDA B:
                            (-1) ^ (card(B)) *
                             M_D(Intersection(B))(x_1))" "g"
          "LAMBDA (x_1: T):
                       FFS.sum(remove(emptyset, powerset(A!1)),
                           LAMBDA B:
                             (-1) ^ (card(B)) *
                              M_D(Intersection(B))(x_1))"))
        (("" (replace -1 * lr t)
          (("" (ground)
            ((""
              (lemma "sum_eq_funs"
               ("S" "D!1" "f"
                "LAMBDA x: FFS.sum(powerset(A!1), LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(B))(x))"
                "g"
                "LAMBDA (x: T): FFS.sum(singleton(emptyset),      LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(B))(x)) + FFS.sum(remove(emptyset, powerset(A!1)), LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(B))(x))"))
              (("" (prop)
                (("" (hide 3)
                  (("" (skolem-typepred)
                    ((""
                      (lemma
                       "sum_remove[finite_set[finite_set[T]],real,0,+]"
                       ("x" "emptyset[finite_set[T]]" "S"
                        "powerset(A!1)" "f" "LAMBDA B:
                      (-1) ^ (card(B)) *
                       M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                                         (B)))
                          (t!1)"))
                      (("" (ground)
                        (("" (lift-if)
                          (("" (ground)
                            (("1" (replace -2 * rl t)
                              (("1"
                                (case
                                 "FFS.sum(singleton(emptyset), LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE](B)))(t!1)) = (-1) ^ (card(emptyset[finite_set[T]])) *
                 M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE](emptyset[finite_set[T]])))(t!1)")
                                (("1"
                                  (replace -1 * rl t)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (lemma
                                       "sum_eq_doms"
                                       ("A"
                                        "{y: finite_set[finite_set[T]] |
                           emptyset[finite_set[T]] /= y AND
                            member[finite_set[finite_set[T]]](y, powerset(A!1))}"
                                        "B"
                                        "{y: set[finite_set[T]] |
                            emptyset[finite_set[T]] /= y AND member(y, powerset(A!1))}"
                                        "f"
                                        "LAMBDA B:
                           (-1) ^ (card(B)) *
                            M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                                                 (B)))
                               (t!1)"))
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "remove")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality
                                             1
                                             :hide?
                                             t)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (hide - 2)
                                              (("2"
                                                (skolem-typepred)
                                                (("2"
                                                  (lemma
                                                   "finite_universe")
                                                  (("2"
                                                    (lemma
                                                     "finite_subset[finite_set[T]]")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "powerset(fullset[T])"
                                                       "x!1")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (expand
                                                             "subset?")
                                                            (("1"
                                                              (skolem-typepred)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "restrict")
                                                        (("2"
                                                          (lemma
                                                           "powerset_finite2[T]")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "fullset[T]")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -3
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "is_finite")
                                                                  (("1"
                                                                    (skolem-typepred)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (expand
                                                                           "injective?")
                                                                          (("1"
                                                                            (skolem-typepred)
                                                                            (("1"
                                                                              (inst?)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skolem-typepred)
                                                                          (("2"
                                                                            (ground)
                                                                            (("2"
                                                                              (lemma
                                                                               "powerset_finite2[T]")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -
                                                                                   2)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "finite_universe")
                                                                                    (("2"
                                                                                      (expand*
                                                                                       "is_finite_type"
                                                                                       "is_finite")
                                                                                      (("2"
                                                                                        (skolem-typepred)
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "injective?")
                                                                                              (("1"
                                                                                                (skolem-typepred)
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               -)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               2
                                                               3)
                                                              (("2"
                                                                (expand*
                                                                 "is_finite_type"
                                                                 "is_finite"
                                                                 "fullset")
                                                                (("2"
                                                                  (skolem-typepred)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("1"
                                                                        (expand
                                                                         "injective?")
                                                                        (("1"
                                                                          (skolem-typepred)
                                                                          (("1"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma
                                           "finite_subset[finite_set[finite_set[T]]]"
                                           ("s"
                                            "{y: set[finite_set[T]] |
                                emptyset[finite_set[T]] /= y AND
                                 member[set[finite_set[T]]](y, powerset[finite_set[T]](A!1))}"
                                            "A"
                                            "powerset(A!1)"))
                                          (("1"
                                            (ground)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (expand "is_finite")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide - 2 3)
                                              (("2"
                                                (expand "subset?")
                                                (("2"
                                                  (skolem-typepred)
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide - 2 3)
                                            (("2"
                                              (skolem-typepred)
                                              (("2"
                                                (lemma
                                                 "finite_universe")
                                                (("2"
                                                  (lemma
                                                   "finite_subset[finite_set[T]]"
                                                   ("s"
                                                    "x!1"
                                                    "A"
                                                    "powerset(fullset[T])"))
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand
                                                       "subset?")
                                                      (("1"
                                                        (skolem-typepred)
                                                        (("1"
                                                          (expand
                                                           "member")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "restrict")
                                                              (("1"
                                                                (expand
                                                                 "powerset")
                                                                (("1"
                                                                  (expand
                                                                   "subset?")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (lemma
                                                       "powerset_finite2[T]")
                                                      (("2"
                                                        (inst?)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (hide
                                                             -1
                                                             -3)
                                                            (("1"
                                                              (expand
                                                               "is_finite")
                                                              (("1"
                                                                (skolem-typepred)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (expand
                                                                       "injective?")
                                                                      (("1"
                                                                        (skolem-typepred)
                                                                        (("1"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skolem-typepred)
                                                                      (("2"
                                                                        (ground)
                                                                        (("1"
                                                                          (reveal
                                                                           -2)
                                                                          (("1"
                                                                            (lemma
                                                                             "finite_subset"
                                                                             ("s"
                                                                              "x!2"
                                                                              "A"
                                                                              "fullset[T]"))
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "is_finite")
                                                                              (("2"
                                                                                (expand
                                                                                 "is_finite_type")
                                                                                (("2"
                                                                                  (skolem-typepred)
                                                                                  (("2"
                                                                                    (inst
                                                                                     1
                                                                                     "N!2"
                                                                                     "g!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "injective?")
                                                                                      (("2"
                                                                                        (skolem-typepred)
                                                                                        (("2"
                                                                                          (ground)
                                                                                          (("2"
                                                                                            (inst?
                                                                                             -5)
                                                                                            (("2"
                                                                                              (ground)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "restrict")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide - 2 3)
                                        (("3"
                                          (lemma "finite_universe")
                                          (("3"
                                            (lemma
                                             "finite_subset[finite_set[finite_set[T]]]"
                                             ("s"
                                              "{y: finite_set[finite_set[T]] |
              emptyset[finite_set[T]] /= y AND
               member[finite_set[finite_set[T]]]
                   (y, powerset[finite_set[T]](A!1))}"
                                              "A"
                                              "powerset(A!1)"))
                                            (("3"
                                              (ground)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (hide - 2 3)
                                        (("4"
                                          (lemma
                                           "powerset_finite2[finite_set[T]]")
                                          (("4"
                                            (ground)
                                            (("4"
                                              (inst
                                               -1
                                               "powerset(fullset[T])")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (skolem-typepred)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (expand
                                                           "powerset")
                                                          (("1"
                                                            (expand
                                                             "subset?")
                                                            (("1"
                                                              (skolem-typepred)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "restrict")
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma
                                                     "powerset_finite2[T]")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "fullset[T]")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (expand
                                                             "is_finite")
                                                            (("1"
                                                              (skolem-typepred)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (expand
                                                                     "injective?")
                                                                    (("1"
                                                                      (skolem-typepred)
                                                                      (("1"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skolem-typepred)
                                                                    (("2"
                                                                      (ground)
                                                                      (("2"
                                                                        (lemma
                                                                         "finite_subset[T]")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "fullset[T]"
                                                                           "x!1")
                                                                          (("1"
                                                                            (ground)
                                                                            (("1"
                                                                              (hide
                                                                               -2
                                                                               -3
                                                                               2)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -1
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "is_finite")
                                                                              (("2"
                                                                                (hide
                                                                                 -)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "finite_universe")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "is_finite_type")
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "N!2"
                                                                                         "g!1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "injective?")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "restrict")
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (lemma
                                                           "finite_universe")
                                                          (("2"
                                                            (expand*
                                                             "is_finite_type"
                                                             "is_finite")
                                                            (("2"
                                                              (skolem-typepred)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (inst?)
                                                                  (("1"
                                                                    (expand
                                                                     "injective?")
                                                                    (("1"
                                                                      (skosimp)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (hide -1 -3 -5)
                                    (("2"
                                      (lemma
                                       "sum_singleton_rew[finite_set[finite_set[T]]]")
                                      (("2"
                                        (inst
                                         -1
                                         "singleton(emptyset[finite_set[T]])"
                                         "LAMBDA B:
                        (-1) ^ (card(B)) *
                         M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                                              (B)))
                            (t!1)"
                                         "emptyset[finite_set[T]]")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (hide - 2 3)
                                            (("1"
                                              (rewrite "card_def")
                                              (("1"
                                                (rewrite
                                                 "Card_bijection")
                                                (("1"
                                                  (inst
                                                   1
                                                   "lambda (y : (singleton(emptyset[finite_set[T]]))) : 0")
                                                  (("1"
                                                    (expand
                                                     "bijective?")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (expand
                                                         "injective?")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (skolem-typepred)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "emptyset[finite_set[T]]")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide - 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2 3 -)
                              (("2"
                                (expand "member")
                                (("2"
                                  (expand "powerset")
                                  (("2"
                                    (expand "subset?")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (hide 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "int" p96 nil)
    (nil application-judgement "int" p96 nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (sum_eq_funs formula-decl nil finite_sets_sum_real finite_sets)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[finite_set[T]]" p96
     nil)
    (sum_remove formula-decl nil finite_sets_sum finite_sets)
    (sum_singleton_rew formula-decl nil finite_sets_sum_real
     finite_sets)
    (card_def formula-decl nil finite_sets nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (Card_bijection formula-decl nil finite_sets nil)
    (sum_eq_doms formula-decl nil finite_sum_aux2 nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (finite_universe formula-decl nil p96 nil)
    (nonempty_powerset application-judgement "(nonempty?[set[T]])" p96
     nil)
    (fullset const-decl "set" sets nil)
    (injective? const-decl "bool" functions nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     p96 nil)
    (powerset_finite2 judgement-tcc nil powerset_aux nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil nat_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_is_partial_order name-judgement
     "(partial_order?[set[finite_set[T]]])" p96 nil)
    (subset? const-decl "bool" sets nil)
    (nil application-judgement "int" p96 nil)
    (subset_is_partial_order name-judgement
     "(partial_order?[set[finite_set[finite_set[T]]]])" p96 nil)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" p96 nil)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[set[finite_set[T]]]" p96 nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[finite_set[finite_set[T]]]" p96 nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (powerset_finite application-judgement "finite_set[set[T]]"
     finite_sets_of_sets nil)
    (powerset_finite3 application-judgement
     "non_empty_finite_set[finite_set[finite_set[T]]]" p96 nil)
    (nonempty_powerset application-judgement
     "(nonempty?[set[finite_set[T]]])" p96 nil)
    (finite_remove application-judgement
     "finite_set[set[finite_set[T]]]" p96 nil)
    (finite_remove application-judgement
     "finite_set[finite_set[finite_set[T]]]" p96 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sum_distributive formula-decl nil finite_sets_sum finite_sets)
    (sum def-decl "R" finite_sets_sum finite_sets)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (< const-decl "bool" reals nil) (nbit type-eq-decl nil bit nil)
    (M_D const-decl "[T -> nbit]" M_D_aux nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (Intersection const-decl "set" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (remove const-decl "set" sets nil)
    (powerset const-decl "setofsets" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil p96 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)
  (e15_22_5-5 "grr" 3889249107
   ("" (skolem-typepred)
    (("" (ground)
      ((""
        (lemma "sum_distributive"
         ("A" "D!1" "f" "LAMBDA (x_1: T):
                      FFS.sum(singleton(emptyset),
                          LAMBDA B:
                            (-1) ^ (card(B)) *
                             M_D(Intersection(B))(x_1))" "g"
          "LAMBDA (x_1: T):
                       FFS.sum(remove(emptyset, powerset(A!1)),
                           LAMBDA B:
                             (-1) ^ (card(B)) *
                              M_D(Intersection(B))(x_1))"))
        (("" (replace -1 * lr t)
          (("" (ground)
            ((""
              (lemma "sum_eq_funs"
               ("S" "D!1" "f"
                "LAMBDA x: FFS.sum(powerset(A!1), LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(B))(x))"
                "g"
                "LAMBDA (x: T): FFS.sum(singleton(emptyset),      LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(B))(x)) + FFS.sum(remove(emptyset, powerset(A!1)), LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(B))(x))"))
              (("" (prop)
                (("" (hide 3)
                  (("" (skolem-typepred)
                    ((""
                      (lemma
                       "sum_remove[finite_set[finite_set[T]],real,0,+]"
                       ("x" "emptyset[finite_set[T]]" "S"
                        "powerset(A!1)" "f" "LAMBDA B:
                      (-1) ^ (card(B)) *
                       M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                                         (B)))
                          (t!1)"))
                      (("" (ground)
                        (("" (lift-if)
                          (("" (ground)
                            (("1" (replace -2 * rl t)
                              (("1"
                                (case
                                 "FFS.sum(singleton(emptyset), LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE](B)))(t!1)) = (-1) ^ (card(emptyset[finite_set[T]])) *
                 M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE](emptyset[finite_set[T]])))(t!1)")
                                (("1"
                                  (replace -1 * rl t)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (lemma
                                       "sum_eq_doms"
                                       ("A"
                                        "{y: finite_set[finite_set[T]] |
                           emptyset[finite_set[T]] /= y AND
                            member[finite_set[finite_set[T]]](y, powerset(A!1))}"
                                        "B"
                                        "{y: set[finite_set[T]] |
                            emptyset[finite_set[T]] /= y AND member(y, powerset(A!1))}"
                                        "f"
                                        "LAMBDA B:
                           (-1) ^ (card(B)) *
                            M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                                                 (B)))
                               (t!1)"))
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "remove")
                                          (("1" (propax) nil)))
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality
                                             1
                                             :hide?
                                             t)
                                            (("1" (grind) nil)
                                             ("2"
                                              (hide - 2)
                                              (("2"
                                                (skolem-typepred)
                                                (("2"
                                                  (lemma
                                                   "finite_universe")
                                                  (("2"
                                                    (lemma
                                                     "finite_subset[finite_set[T]]")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "powerset(fullset[T])"
                                                       "x!1")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (expand
                                                             "subset?")
                                                            (("1"
                                                              (skolem-typepred)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (grind)
                                                                      nil)))))))))))))))
                                                       ("2"
                                                        (expand
                                                         "restrict")
                                                        (("2"
                                                          (lemma
                                                           "powerset_finite2[T]")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "fullset[T]")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -3
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "is_finite")
                                                                  (("1"
                                                                    (skolem-typepred)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (expand
                                                                           "injective?")
                                                                          (("1"
                                                                            (skolem-typepred)
                                                                            (("1"
                                                                              (inst?)
                                                                              nil)))))
                                                                         ("2"
                                                                          (skolem-typepred)
                                                                          (("2"
                                                                            (ground)
                                                                            (("2"
                                                                              (lemma
                                                                               "powerset_finite2[T]")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (ground)
                                                                                      nil)))))
                                                                                 ("2"
                                                                                  (hide
                                                                                   -
                                                                                   2)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "finite_universe")
                                                                                    (("2"
                                                                                      (expand*
                                                                                       "is_finite_type"
                                                                                       "is_finite")
                                                                                      (("2"
                                                                                        (skolem-typepred)
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "injective?")
                                                                                              (("1"
                                                                                                (skolem-typepred)
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  nil)))))
                                                                                             ("2"
                                                                                              (hide
                                                                                               -)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil)))))))))))))))))))))))))))))))))))
                                                             ("2"
                                                              (hide
                                                               2
                                                               3)
                                                              (("2"
                                                                (expand*
                                                                 "is_finite_type"
                                                                 "is_finite"
                                                                 "fullset")
                                                                (("2"
                                                                  (skolem-typepred)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("1"
                                                                        (expand
                                                                         "injective?")
                                                                        (("1"
                                                                          (skolem-typepred)
                                                                          (("1"
                                                                            (inst?)
                                                                            nil)))))
                                                                       ("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))))))))))))))))
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma
                                           "finite_subset[finite_set[finite_set[T]]]"
                                           ("s"
                                            "{y: set[finite_set[T]] |
                                emptyset[finite_set[T]] /= y AND
                                 member[set[finite_set[T]]](y, powerset[finite_set[T]](A!1))}"
                                            "A"
                                            "powerset(A!1)"))
                                          (("1"
                                            (ground)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (expand "is_finite")
                                                (("1" (propax) nil)))))
                                             ("2"
                                              (hide - 2 3)
                                              (("2"
                                                (expand "subset?")
                                                (("2"
                                                  (skolem-typepred)
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (grind)
                                                      nil)))))))))))
                                           ("2"
                                            (hide - 2 3)
                                            (("2"
                                              (skolem-typepred)
                                              (("2"
                                                (lemma
                                                 "finite_universe")
                                                (("2"
                                                  (lemma
                                                   "finite_subset[finite_set[T]]"
                                                   ("s"
                                                    "x!1"
                                                    "A"
                                                    "powerset(fullset[T])"))
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand
                                                       "subset?")
                                                      (("1"
                                                        (skolem-typepred)
                                                        (("1"
                                                          (expand
                                                           "member")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "restrict")
                                                              (("1"
                                                                (expand
                                                                 "powerset")
                                                                (("1"
                                                                  (expand
                                                                   "subset?")
                                                                  (("1"
                                                                    (grind)
                                                                    nil)))))))))))))))))
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (lemma
                                                       "powerset_finite2[T]")
                                                      (("2"
                                                        (inst?)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (hide
                                                             -1
                                                             -3)
                                                            (("1"
                                                              (expand
                                                               "is_finite")
                                                              (("1"
                                                                (skolem-typepred)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (expand
                                                                       "injective?")
                                                                      (("1"
                                                                        (skolem-typepred)
                                                                        (("1"
                                                                          (inst?)
                                                                          nil)))))
                                                                     ("2"
                                                                      (skolem-typepred)
                                                                      (("2"
                                                                        (ground)
                                                                        (("1"
                                                                          (REVEAL
                                                                           -2)
                                                                          (("1"
                                                                            (lemma
                                                                             "finite_subset"
                                                                             ("s"
                                                                              "x!2"
                                                                              "A"
                                                                              "fullset[T]"))
                                                                            (("1"
                                                                              (grind)
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "is_finite")
                                                                              (("2"
                                                                                (expand
                                                                                 "is_finite_type")
                                                                                (("2"
                                                                                  (skolem-typepred)
                                                                                  (("2"
                                                                                    (inst
                                                                                     1
                                                                                     "N!2"
                                                                                     "g!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "injective?")
                                                                                      (("2"
                                                                                        (skolem-typepred)
                                                                                        (("2"
                                                                                          (ground)
                                                                                          (("2"
                                                                                            (inst?
                                                                                             -5)
                                                                                            (("2"
                                                                                              (ground)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "restrict")
                                                                                                (("2"
                                                                                                  (PROPAX)
                                                                                                  nil)))))))))))))))))))))))))
                                                                         ("2"
                                                                          (grind)
                                                                          nil)
                                                                         ("3"
                                                                          (grind)
                                                                          nil)))))))))))))))))
                                                         ("2"
                                                          (grind)
                                                          nil)))))))))))))))))))
                                       ("3"
                                        (hide - 2 3)
                                        (("3"
                                          (lemma "finite_universe")
                                          (("3"
                                            (lemma
                                             "powerset_finite2[finite_set[T]]"
                                             ("A" "A!1"))
                                            (("3"
                                              (lemma
                                               "finite_subset[finite_set[finite_set[T]]]"
                                               ("s"
                                                "{y: finite_set[finite_set[T]] |
              emptyset[finite_set[T]] /= y AND
               member[finite_set[finite_set[T]]]
                   (y, powerset[finite_set[T]](A!1))}"
                                                "A"
                                                "powerset(A!1)"))
                                              (("3"
                                                (ground)
                                                (("1" (grind) nil)
                                                 ("2"
                                                  (grind)
                                                  nil)))))))))))
                                       ("4"
                                        (hide - 2 3)
                                        (("4"
                                          (lemma
                                           "powerset_finite2[finite_set[T]]")
                                          (("4"
                                            (ground)
                                            (("4"
                                              (inst
                                               -1
                                               "powerset(fullset[T])")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (skolem-typepred)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (expand
                                                           "powerset")
                                                          (("1"
                                                            (expand
                                                             "subset?")
                                                            (("1"
                                                              (skolem-typepred)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (grind)
                                                                      nil)))))))))))))))))))))))
                                               ("2"
                                                (expand "restrict")
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma
                                                     "powerset_finite2[T]"
                                                     ("A"
                                                      "fullset[T]"))
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (expand
                                                           "is_finite")
                                                          (("1"
                                                            (skolem-typepred)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (expand
                                                                   "injective?")
                                                                  (("1"
                                                                    (skolem-typepred)
                                                                    (("1"
                                                                      (inst?)
                                                                      nil)))))
                                                                 ("2"
                                                                  (skolem-typepred)
                                                                  (("2"
                                                                    (ground)
                                                                    (("2"
                                                                      (lemma
                                                                       "finite_subset[T]")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "fullset[T]"
                                                                         "x!1")
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (hide
                                                                             -2
                                                                             -3
                                                                             2)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))))
                                                                         ("2"
                                                                          (hide
                                                                           -1
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "is_finite")
                                                                            (("2"
                                                                              (hide
                                                                               -)
                                                                              (("2"
                                                                                (lemma
                                                                                 "finite_universe")
                                                                                (("2"
                                                                                  (expand
                                                                                   "is_finite_type")
                                                                                  (("2"
                                                                                    (skosimp)
                                                                                    (("2"
                                                                                      (inst
                                                                                       1
                                                                                       "N!2"
                                                                                       "g!1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "injective?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "restrict")
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (ground)
                                                                                                nil)))))))))))))))))))))))))))))))))))))))))))
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (lemma
                                                         "finite_universe")
                                                        (("2"
                                                          (expand*
                                                           "is_finite_type"
                                                           "is_finite")
                                                          (("2"
                                                            (skolem-typepred)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (inst?)
                                                                (("1"
                                                                  (expand
                                                                   "injective?")
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (ground)
                                                                        nil)))))))
                                                                 ("2"
                                                                  (hide
                                                                   -)
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (hide -1 -3 -5)
                                    (("2"
                                      (lemma
                                       "sum_singleton_rew[finite_set[finite_set[T]]]")
                                      (("2"
                                        (inst
                                         -1
                                         "singleton(emptyset[finite_set[T]])"
                                         "LAMBDA B:
                        (-1) ^ (card(B)) *
                         M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                                              (B)))
                            (t!1)"
                                         "emptyset[finite_set[T]]")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (hide - 2 3)
                                            (("1"
                                              (rewrite "card_def")
                                              (("1"
                                                (rewrite
                                                 "Card_bijection")
                                                (("1"
                                                  (inst
                                                   1
                                                   "lambda (y : (singleton(emptyset[finite_set[T]]))) : 0")
                                                  (("1"
                                                    (expand
                                                     "bijective?")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (expand
                                                         "injective?")
                                                        (("1"
                                                          (grind)
                                                          nil)))
                                                       ("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (skolem-typepred)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "emptyset[finite_set[T]]")
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))))))))
                                           ("2"
                                            (hide - 2)
                                            (("2"
                                              (grind)
                                              nil)))))))))))))))))
                             ("2" (hide 2 3 -)
                              (("2"
                                (expand "member")
                                (("2"
                                  (expand "powerset")
                                  (("2"
                                    (expand "subset?")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (hide 1)
                                        (("2"
                                          (grind)
                                          nil))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (e15_22_5-4 "grr" 3889248487
   ("" (skolem-typepred)
    (("" (ground)
      ((""
        (lemma "sum_distributive"
         ("A" "D!1" "f" "LAMBDA (x_1: T):
                      FFS.sum(singleton(emptyset),
                          LAMBDA B:
                            (-1) ^ (card(B)) *
                             M_D(Intersection(B))(x_1))" "g"
          "LAMBDA (x_1: T):
                       FFS.sum(remove(emptyset, powerset(A!1)),
                           LAMBDA B:
                             (-1) ^ (card(B)) *
                              M_D(Intersection(B))(x_1))"))
        (("" (replace -1 * lr t)
          (("" (ground)
            ((""
              (lemma "sum_eq_funs"
               ("S" "D!1" "f"
                "LAMBDA x: FFS.sum(powerset(A!1), LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(B))(x))"
                "g"
                "LAMBDA (x: T): FFS.sum(singleton(emptyset),      LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(B))(x)) + FFS.sum(remove(emptyset, powerset(A!1)), LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(B))(x))"))
              (("" (prop)
                (("" (hide 3)
                  (("" (skolem-typepred)
                    ((""
                      (lemma
                       "sum_remove[finite_set[finite_set[T]],real,0,+]"
                       ("x" "emptyset[finite_set[T]]" "S"
                        "powerset(A!1)" "f" "LAMBDA B:
                      (-1) ^ (card(B)) *
                       M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                                         (B)))
                          (t!1)"))
                      (("" (ground)
                        (("" (lift-if)
                          (("" (ground)
                            (("1" (replace -2 * rl t)
                              (("1"
                                (case
                                 "FFS.sum(singleton(emptyset), LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE](B)))(t!1)) = (-1) ^ (card(emptyset[finite_set[T]])) *
                 M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE](emptyset[finite_set[T]])))(t!1)")
                                (("1"
                                  (replace -1 * rl t)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (lemma
                                       "sum_eq_doms"
                                       ("A"
                                        "{y: finite_set[finite_set[T]] |
                           emptyset[finite_set[T]] /= y AND
                            member[finite_set[finite_set[T]]](y, powerset(A!1))}"
                                        "B"
                                        "{y: set[finite_set[T]] |
                            emptyset[finite_set[T]] /= y AND member(y, powerset(A!1))}"
                                        "f"
                                        "LAMBDA B:
                           (-1) ^ (card(B)) *
                            M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                                                 (B)))
                               (t!1)"))
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "remove")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality
                                             1
                                             :hide?
                                             t)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (hide - 2)
                                              (("2"
                                                (skolem-typepred)
                                                (("2"
                                                  (lemma
                                                   "finite_universe")
                                                  (("2"
                                                    (lemma
                                                     "finite_subset[finite_set[T]]")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "powerset(fullset[T])"
                                                       "x!1")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (expand
                                                             "subset?")
                                                            (("1"
                                                              (skolem-typepred)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma
                                           "finite_subset[finite_set[finite_set[T]]]"
                                           ("s"
                                            "{y: set[finite_set[T]] |
                                emptyset[finite_set[T]] /= y AND
                                 member[set[finite_set[T]]](y, powerset[finite_set[T]](A!1))}"
                                            "A"
                                            "powerset(A!1)"))
                                          (("1"
                                            (ground)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (expand "is_finite")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide - 2 3)
                                              (("2"
                                                (expand "subset?")
                                                (("2"
                                                  (skolem-typepred)
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide - 2 3)
                                            (("2"
                                              (skolem-typepred)
                                              (("2"
                                                (lemma
                                                 "finite_universe")
                                                (("2"
                                                  (lemma
                                                   "finite_subset[finite_set[T]]"
                                                   ("s"
                                                    "x!1"
                                                    "A"
                                                    "powerset(fullset[T])"))
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand
                                                       "subset?")
                                                      (("1"
                                                        (skolem-typepred)
                                                        (("1"
                                                          (expand
                                                           "member")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "restrict")
                                                              (("1"
                                                                (expand
                                                                 "powerset")
                                                                (("1"
                                                                  (expand
                                                                   "subset?")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (postpone) nil nil)
                                       ("4"
                                        (hide - 2 3)
                                        (("4"
                                          (lemma
                                           "powerset_finite2[finite_set[T]]")
                                          (("4"
                                            (ground)
                                            (("4"
                                              (inst
                                               -1
                                               "powerset(fullset[T])")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (skolem-typepred)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (expand
                                                           "powerset")
                                                          (("1"
                                                            (expand
                                                             "subset?")
                                                            (("1"
                                                              (skolem-typepred)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (hide -1 -3 -5)
                                    (("2"
                                      (lemma
                                       "sum_singleton_rew[finite_set[finite_set[T]]]")
                                      (("2"
                                        (inst
                                         -1
                                         "singleton(emptyset[finite_set[T]])"
                                         "LAMBDA B:
                        (-1) ^ (card(B)) *
                         M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                                              (B)))
                            (t!1)"
                                         "emptyset[finite_set[T]]")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (hide - 2 3)
                                            (("1"
                                              (rewrite "card_def")
                                              (("1"
                                                (rewrite
                                                 "Card_bijection")
                                                (("1"
                                                  (inst
                                                   1
                                                   "lambda (y : (singleton(emptyset[finite_set[T]]))) : 0")
                                                  (("1"
                                                    (expand
                                                     "bijective?")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (expand
                                                         "injective?")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (skolem-typepred)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "emptyset[finite_set[T]]")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide - 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2 3 -)
                              (("2"
                                (expand "member")
                                (("2"
                                  (expand "powerset")
                                  (("2"
                                    (expand "subset?")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (hide 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (e15_22_5-3 "half-way but no bad symbols" 3889248317
   ("" (skolem-typepred)
    (("" (ground)
      ((""
        (lemma "sum_distributive"
         ("A" "D!1" "f" "LAMBDA (x_1: T):
                      FFS.sum(singleton(emptyset),
                          LAMBDA B:
                            (-1) ^ (card(B)) *
                             M_D(Intersection(B))(x_1))" "g"
          "LAMBDA (x_1: T):
                       FFS.sum(remove(emptyset, powerset(A!1)),
                           LAMBDA B:
                             (-1) ^ (card(B)) *
                              M_D(Intersection(B))(x_1))"))
        (("" (replace -1 * lr t)
          (("" (ground)
            ((""
              (lemma "sum_eq_funs"
               ("S" "D!1" "f"
                "LAMBDA x: FFS.sum(powerset(A!1), LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(B))(x))"
                "g"
                "LAMBDA (x: T): FFS.sum(singleton(emptyset),      LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(B))(x)) + FFS.sum(remove(emptyset, powerset(A!1)), LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(B))(x))"))
              (("" (prop)
                (("" (hide 3)
                  (("" (skolem-typepred)
                    ((""
                      (lemma
                       "sum_remove[finite_set[finite_set[T]],real,0,+]"
                       ("x" "emptyset[finite_set[T]]" "S"
                        "powerset(A!1)" "f" "LAMBDA B:
                      (-1) ^ (card(B)) *
                       M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                                         (B)))
                          (t!1)"))
                      (("" (ground)
                        (("" (lift-if)
                          (("" (ground)
                            (("1" (replace -2 * rl t)
                              (("1"
                                (case
                                 "FFS.sum(singleton(emptyset), LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE](B)))(t!1)) = (-1) ^ (card(emptyset[finite_set[T]])) *
                 M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE](emptyset[finite_set[T]])))(t!1)")
                                (("1"
                                  (replace -1 * rl t)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (lemma
                                       "sum_eq_doms"
                                       ("A"
                                        "{y: finite_set[finite_set[T]] |
                           emptyset[finite_set[T]] /= y AND
                            member[finite_set[finite_set[T]]](y, powerset(A!1))}"
                                        "B"
                                        "{y: set[finite_set[T]] |
                            emptyset[finite_set[T]] /= y AND member(y, powerset(A!1))}"
                                        "f"
                                        "LAMBDA B:
                           (-1) ^ (card(B)) *
                            M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                                                 (B)))
                               (t!1)"))
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "remove")
                                          (("1" (propax) nil)))
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality
                                             1
                                             :hide?
                                             t)
                                            (("1" (grind) nil)
                                             ("2"
                                              (hide - 2)
                                              (("2"
                                                (skolem-typepred)
                                                (("2"
                                                  (lemma
                                                   "finite_universe")
                                                  (("2"
                                                    (lemma
                                                     "finite_subset[finite_set[T]]")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "powerset(fullset[T])"
                                                       "x!1")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (expand
                                                             "subset?")
                                                            (("1"
                                                              (skolem-typepred)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (grind)
                                                                      nil)))))))))))))))
                                                       ("2"
                                                        (EXPAND
                                                         "restrict")
                                                        (("2"
                                                          (LEMMA
                                                           "powerset_finite2[T]")
                                                          (("2"
                                                            (INST
                                                             -1
                                                             "fullset[T]")
                                                            (("1"
                                                              (GROUND)
                                                              (("1"
                                                                (HIDE
                                                                 -1
                                                                 -3
                                                                 2)
                                                                (("1"
                                                                  (EXPAND
                                                                   "is_finite")
                                                                  (("1"
                                                                    (SKOLEM-TYPEPRED)
                                                                    (("1"
                                                                      (INST?)
                                                                      (("1"
                                                                        (INST?)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "injective?")
                                                                          (("1"
                                                                            (SKOLEM-TYPEPRED)
                                                                            (("1"
                                                                              (INST?)
                                                                              nil)))))
                                                                         ("2"
                                                                          (SKOLEM-TYPEPRED)
                                                                          (("2"
                                                                            (GROUND)
                                                                            (("2"
                                                                              (LEMMA
                                                                               "powerset_finite2[T]")
                                                                              (("2"
                                                                                (INST?)
                                                                                (("1"
                                                                                  (GROUND)
                                                                                  (("1"
                                                                                    (INST?)
                                                                                    (("1"
                                                                                      (GROUND)
                                                                                      nil)))))
                                                                                 ("2"
                                                                                  (HIDE
                                                                                   -
                                                                                   2)
                                                                                  (("2"
                                                                                    (LEMMA
                                                                                     "finite_universe")
                                                                                    (("2"
                                                                                      (EXPAND*
                                                                                       "is_finite_type"
                                                                                       "is_finite")
                                                                                      (("2"
                                                                                        (SKOLEM-TYPEPRED)
                                                                                        (("2"
                                                                                          (INST?)
                                                                                          (("2"
                                                                                            (INST?)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "injective?")
                                                                                              (("1"
                                                                                                (SKOLEM-TYPEPRED)
                                                                                                (("1"
                                                                                                  (INST?)
                                                                                                  nil)))))
                                                                                             ("2"
                                                                                              (HIDE
                                                                                               -)
                                                                                              (("2"
                                                                                                (GRIND)
                                                                                                nil)))))))))))))))))))))))))))))))))))
                                                             ("2"
                                                              (HIDE
                                                               2
                                                               3)
                                                              (("2"
                                                                (EXPAND*
                                                                 "is_finite_type"
                                                                 "is_finite"
                                                                 "fullset")
                                                                (("2"
                                                                  (SKOLEM-TYPEPRED)
                                                                  (("2"
                                                                    (INST?)
                                                                    (("2"
                                                                      (INST?)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "injective?")
                                                                        (("1"
                                                                          (SKOLEM-TYPEPRED)
                                                                          (("1"
                                                                            (INST?)
                                                                            nil)))))
                                                                       ("2"
                                                                        (GRIND)
                                                                        nil)))))))))))))))))))))))))))))))))
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma
                                           "finite_subset[finite_set[finite_set[T]]]"
                                           ("s"
                                            "{y: set[finite_set[T]] |
                                emptyset[finite_set[T]] /= y AND
                                 member[set[finite_set[T]]](y, powerset[finite_set[T]](A!1))}"
                                            "A"
                                            "powerset(A!1)"))
                                          (("1"
                                            (ground)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (expand "is_finite")
                                                (("1" (propax) nil)))))
                                             ("2"
                                              (hide - 2 3)
                                              (("2"
                                                (expand "subset?")
                                                (("2"
                                                  (skolem-typepred)
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (grind)
                                                      nil)))))))))))
                                           ("2"
                                            (hide - 2 3)
                                            (("2"
                                              (skolem-typepred)
                                              (("2"
                                                (lemma
                                                 "finite_universe")
                                                (("2"
                                                  (lemma
                                                   "finite_subset[finite_set[T]]"
                                                   ("s"
                                                    "x!1"
                                                    "A"
                                                    "powerset(fullset[T])"))
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand
                                                       "subset?")
                                                      (("1"
                                                        (skolem-typepred)
                                                        (("1"
                                                          (expand
                                                           "member")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "restrict")
                                                              (("1"
                                                                (expand
                                                                 "powerset")
                                                                (("1"
                                                                  (expand
                                                                   "subset?")
                                                                  (("1"
                                                                    (grind)
                                                                    nil)))))))))))))))))
                                                   ("2"
                                                    (HIDE 2)
                                                    (("2"
                                                      (LEMMA
                                                       "powerset_finite2[T]")
                                                      (("2"
                                                        (INST?)
                                                        (("1"
                                                          (GROUND)
                                                          (("1"
                                                            (HIDE
                                                             -1
                                                             -3)
                                                            (("1"
                                                              (EXPAND
                                                               "is_finite")
                                                              (("1"
                                                                (SKOLEM-TYPEPRED)
                                                                (("1"
                                                                  (INST?)
                                                                  (("1"
                                                                    (INST?)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "injective?")
                                                                      (("1"
                                                                        (SKOLEM-TYPEPRED)
                                                                        (("1"
                                                                          (INST?)
                                                                          nil)))))
                                                                     ("2"
                                                                      (SKOLEM-TYPEPRED)
                                                                      (("2"
                                                                        (GROUND)
                                                                        (("1"
                                                                          (REVEAL
                                                                           -2)
                                                                          (("1"
                                                                            (LEMMA
                                                                             "finite_subset"
                                                                             ("s"
                                                                              "x!2"
                                                                              "A"
                                                                              "fullset[T]"))
                                                                            (("1"
                                                                              (GRIND)
                                                                              nil)
                                                                             ("2"
                                                                              (EXPAND
                                                                               "is_finite")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "is_finite_type")
                                                                                (("2"
                                                                                  (SKOLEM-TYPEPRED)
                                                                                  (("2"
                                                                                    (INST
                                                                                     1
                                                                                     "N!2"
                                                                                     "g!1")
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "injective?")
                                                                                      (("2"
                                                                                        (SKOLEM-TYPEPRED)
                                                                                        (("2"
                                                                                          (GROUND)
                                                                                          (("2"
                                                                                            (INST?
                                                                                             -5)
                                                                                            (("2"
                                                                                              (GROUND)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "restrict")
                                                                                                (("2"
                                                                                                  (PROPAX)
                                                                                                  nil)))))))))))))))))))))))))
                                                                         ("2"
                                                                          (GRIND)
                                                                          nil)
                                                                         ("3"
                                                                          (GRIND)
                                                                          nil)))))))))))))))))
                                                         ("2"
                                                          (GRIND)
                                                          nil)))))))))))))))))))
                                       ("3"
                                        (HIDE - 2 3)
                                        (("3"
                                          (LEMMA "finite_universe")
                                          (("3"
                                            (LEMMA
                                             "powerset_finite2[finite_set[T]]"
                                             ("A" "A!1"))
                                            (("3"
                                              (LEMMA
                                               "finite_subset[finite_set[finite_set[T]]]"
                                               ("s"
                                                "{y: finite_set[finite_set[T]] |
              emptyset[finite_set[T]] /= y AND
               member[finite_set[finite_set[T]]]
                   (y, powerset[finite_set[T]](A!1))}"
                                                "A"
                                                "powerset(A!1)"))
                                              (("3"
                                                (GROUND)
                                                (("1" (GRIND) nil)
                                                 ("2"
                                                  (GRIND)
                                                  nil)))))))))))
                                       ("4"
                                        (hide - 2 3)
                                        (("4"
                                          (lemma
                                           "powerset_finite2[finite_set[T]]")
                                          (("4"
                                            (ground)
                                            (("4"
                                              (inst
                                               -1
                                               "powerset(fullset[T])")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (skolem-typepred)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (expand
                                                           "powerset")
                                                          (("1"
                                                            (expand
                                                             "subset?")
                                                            (("1"
                                                              (skolem-typepred)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (grind)
                                                                      nil)))))))))))))))))))))))
                                               ("2"
                                                (EXPAND "restrict")
                                                (("2"
                                                  (HIDE 2)
                                                  (("2"
                                                    (LEMMA
                                                     "powerset_finite2[T]"
                                                     ("A"
                                                      "fullset[T]"))
                                                    (("1"
                                                      (GROUND)
                                                      (("1"
                                                        (HIDE -1)
                                                        (("1"
                                                          (EXPAND
                                                           "is_finite")
                                                          (("1"
                                                            (SKOLEM-TYPEPRED)
                                                            (("1"
                                                              (INST?)
                                                              (("1"
                                                                (INST?)
                                                                (("1"
                                                                  (EXPAND
                                                                   "injective?")
                                                                  (("1"
                                                                    (SKOLEM-TYPEPRED)
                                                                    (("1"
                                                                      (INST?)
                                                                      nil)))))
                                                                 ("2"
                                                                  (SKOLEM-TYPEPRED)
                                                                  (("2"
                                                                    (GROUND)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "finite_subset[T]")
                                                                      (("2"
                                                                        (INST
                                                                         -1
                                                                         "fullset[T]"
                                                                         "x!1")
                                                                        (("1"
                                                                          (GROUND)
                                                                          (("1"
                                                                            (HIDE
                                                                             -2
                                                                             -3
                                                                             2)
                                                                            (("1"
                                                                              (GRIND)
                                                                              nil)))))
                                                                         ("2"
                                                                          (HIDE
                                                                           -1
                                                                           2)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "is_finite")
                                                                            (("2"
                                                                              (HIDE
                                                                               -)
                                                                              (("2"
                                                                                (LEMMA
                                                                                 "finite_universe")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "is_finite_type")
                                                                                  (("2"
                                                                                    (SKOSIMP)
                                                                                    (("2"
                                                                                      (INST
                                                                                       1
                                                                                       "N!2"
                                                                                       "g!1")
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "injective?")
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "restrict")
                                                                                          (("2"
                                                                                            (SKOSIMP)
                                                                                            (("2"
                                                                                              (INST?)
                                                                                              (("2"
                                                                                                (GROUND)
                                                                                                nil)))))))))))))))))))))))))))))))))))))))))))
                                                     ("2"
                                                      (HIDE 2)
                                                      (("2"
                                                        (LEMMA
                                                         "finite_universe")
                                                        (("2"
                                                          (EXPAND*
                                                           "is_finite_type"
                                                           "is_finite")
                                                          (("2"
                                                            (SKOLEM-TYPEPRED)
                                                            (("2"
                                                              (INST?)
                                                              (("2"
                                                                (INST?)
                                                                (("1"
                                                                  (EXPAND
                                                                   "injective?")
                                                                  (("1"
                                                                    (SKOSIMP)
                                                                    (("1"
                                                                      (INST?)
                                                                      (("1"
                                                                        (GROUND)
                                                                        nil)))))))
                                                                 ("2"
                                                                  (HIDE
                                                                   -)
                                                                  (("2"
                                                                    (GRIND)
                                                                    nil)))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (hide -1 -3 -5)
                                    (("2"
                                      (lemma
                                       "sum_singleton_rew[finite_set[finite_set[T]]]")
                                      (("2"
                                        (inst
                                         -1
                                         "singleton(emptyset[finite_set[T]])"
                                         "LAMBDA B:
                        (-1) ^ (card(B)) *
                         M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                                              (B)))
                            (t!1)"
                                         "emptyset[finite_set[T]]")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (hide - 2 3)
                                            (("1"
                                              (rewrite "card_def")
                                              (("1"
                                                (rewrite
                                                 "Card_bijection")
                                                (("1"
                                                  (inst
                                                   1
                                                   "lambda (y : (singleton(emptyset[finite_set[T]]))) : 0")
                                                  (("1"
                                                    (expand
                                                     "bijective?")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (expand
                                                         "injective?")
                                                        (("1"
                                                          (grind)
                                                          nil)))
                                                       ("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (skolem-typepred)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "emptyset[finite_set[T]]")
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))))))))
                                           ("2"
                                            (hide - 2)
                                            (("2"
                                              (grind)
                                              nil)))))))))))))))))
                             ("2" (hide 2 3 -)
                              (("2"
                                (expand "member")
                                (("2"
                                  (expand "powerset")
                                  (("2"
                                    (expand "subset?")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (hide 1)
                                        (("2"
                                          (grind)
                                          nil))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (e15_22_5-2 "half-way but no bad symbols" 3889247445
   ("" (skolem-typepred)
    (("" (ground)
      ((""
        (lemma "sum_distributive"
         ("A" "D!1" "f" "LAMBDA (x_1: T):
                   FFS.sum(singleton(emptyset),
                       LAMBDA B:
                         (-1) ^ (card(B)) *
                          M_D(Intersection(B))(x_1))" "g"
          "LAMBDA (x_1: T):
                    FFS.sum(remove(emptyset, powerset(A!1)),
                        LAMBDA B:
                          (-1) ^ (card(B)) *
                           M_D(Intersection(B))(x_1))"))
        (("" (replace -1 * lr t)
          (("" (ground)
            ((""
              (lemma "sum_eq_funs"
               ("S" "D!1" "f"
                "LAMBDA x: FFS.sum(powerset(A!1), LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(B))(x))"
                "g"
                "LAMBDA (x: T): FFS.sum(singleton(emptyset),      LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(B))(x)) + FFS.sum(remove(emptyset, powerset(A!1)), LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(B))(x))"))
              (("" (prop)
                (("" (hide 3)
                  (("" (skolem-typepred)
                    ((""
                      (lemma
                       "sum_remove[finite_set[finite_set[T]],real,0,+]"
                       ("x" "emptyset[finite_set[T]]" "S"
                        "powerset(A!1)" "f" "LAMBDA B:
                   (-1) ^ (card(B)) *
                    M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                                      (B)))
                       (t!1)"))
                      (("" (ground)
                        (("" (lift-if)
                          (("" (ground)
                            (("1" (replace -2 * rl t)
                              (("1"
                                (case
                                 "FFS.sum(singleton(emptyset), LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE](B)))(t!1)) = (-1) ^ (card(emptyset[finite_set[T]])) *
        M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE](emptyset[finite_set[T]])))(t!1)")
                                (("1"
                                  (replace -1 * rl t)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (lemma
                                       "sum_eq_doms"
                                       ("A"
                                        "{y: finite_set[finite_set[T]] |
                    emptyset[finite_set[T]] /= y AND
                     member[finite_set[finite_set[T]]](y, powerset(A!1))}"
                                        "B"
                                        "{y: set[finite_set[T]] |
                     emptyset[finite_set[T]] /= y AND member(y, powerset(A!1))}"
                                        "f"
                                        "LAMBDA B:
                    (-1) ^ (card(B)) *
                     M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                                          (B)))
                        (t!1)"))
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "remove")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality
                                             1
                                             :hide?
                                             t)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (hide - 2)
                                              (("2"
                                                (skolem-typepred)
                                                (("2"
                                                  (lemma
                                                   "finite_universe")
                                                  (("2"
                                                    (lemma
                                                     "finite_subset[finite_set[T]]")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "powerset(fullset[T])"
                                                       "x!1")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (expand
                                                             "subset?")
                                                            (("1"
                                                              (skolem-typepred)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "restrict")
                                                        (("2"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma
                                           "finite_subset[finite_set[finite_set[T]]]"
                                           ("s"
                                            "{y: set[finite_set[T]] |
                       emptyset[finite_set[T]] /= y AND
                        member[set[finite_set[T]]](y, powerset[finite_set[T]](A!1))}"
                                            "A"
                                            "powerset(A!1)"))
                                          (("1"
                                            (ground)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (expand "is_finite")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide - 2 3)
                                              (("2"
                                                (expand "subset?")
                                                (("2"
                                                  (skolem-typepred)
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide - 2 3)
                                            (("2"
                                              (skolem-typepred)
                                              (("2"
                                                (lemma
                                                 "finite_universe")
                                                (("2"
                                                  (lemma
                                                   "finite_subset[finite_set[T]]"
                                                   ("s"
                                                    "x!1"
                                                    "A"
                                                    "powerset(fullset[T])"))
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand
                                                       "subset?")
                                                      (("1"
                                                        (skolem-typepred)
                                                        (("1"
                                                          (expand
                                                           "member")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "restrict")
                                                              (("1"
                                                                (expand
                                                                 "powerset")
                                                                (("1"
                                                                  (expand
                                                                   "subset?")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide - 2 3)
                                        (("3"
                                          (lemma "finite_universe")
                                          (("3" (postpone) nil nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (hide - 2 3)
                                        (("4"
                                          (lemma
                                           "powerset_finite2[finite_set[T]]")
                                          (("4"
                                            (ground)
                                            (("4"
                                              (inst
                                               -1
                                               "powerset(fullset[T])")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (skolem-typepred)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (expand
                                                           "powerset")
                                                          (("1"
                                                            (expand
                                                             "subset?")
                                                            (("1"
                                                              (skolem-typepred)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "restrict")
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (hide -1 -3 -5)
                                    (("2"
                                      (lemma
                                       "sum_singleton_rew[finite_set[finite_set[T]]]")
                                      (("2"
                                        (inst
                                         -1
                                         "singleton(emptyset[finite_set[T]])"
                                         "LAMBDA B:
                  (-1) ^ (card(B)) *
                   M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                                        (B)))
                      (t!1)"
                                         "emptyset[finite_set[T]]")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (hide - 2 3)
                                            (("1"
                                              (rewrite "card_def")
                                              (("1"
                                                (rewrite
                                                 "Card_bijection")
                                                (("1"
                                                  (inst
                                                   1
                                                   "lambda (y : (singleton(emptyset[finite_set[T]]))) : 0")
                                                  (("1"
                                                    (expand
                                                     "bijective?")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (expand
                                                         "injective?")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (skolem-typepred)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "emptyset[finite_set[T]]")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide - 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2 3 -)
                              (("2"
                                (expand "member")
                                (("2"
                                  (expand "powerset")
                                  (("2"
                                    (expand "subset?")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (hide 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (e15_22_5-1 nil 3887670340
   ("" (skolem-typepred)
    (("" (ground)
      ((""
        (lemma "sum_distributive"
         ("A" "D!1" "f" "LAMBDA (x_1: T):
                FFS.sum(singleton(emptyset),
                    LAMBDA B:
                      (-1) ^ (card(B)) *
                       M_D(Intersection(B))(x_1))" "g" "LAMBDA (x_1: T):
                 FFS.sum(remove(emptyset, powerset(A!1)),
                     LAMBDA B:
                       (-1) ^ (card(B)) *
                        M_D(Intersection(B))(x_1))"))
        (("" (replace -1 * lr t)
          (("" (ground)
            ((""
              (lemma "sum_eq_funs"
               ("S" "D!1" "f"
                "LAMBDA x: FFS.sum(powerset(A!1), LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(B))(x))"
                "g" "LAMBDA (x: T):
                             FFS.sum(singleton(emptyset),
                                 LAMBDA B: (-1) ^ (card(B)) * M_D(Intersection(B))(x))
                           + FFS.sum(remove ...)"))
              (("" (prop)
                (("" (hide 3)
                  (("" (skolem-typepred)
                    ((""
                      (lemma
                       "sum_remove[finite_set[finite_set[T]],real,0,+]"
                       ("x" "emptyset[finite_set[T]]" "S"
                        "powerset(A!1)" "f" "LAMBDA B:
                (-1) ^ (card(B)) *
                 M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                                   (B)))
                    (t!1)"))
                      (("" (ground)
                        (("" (lift-if)
                          (("" (ground)
                            (("1" (replace -2 * rl t)
                              (("1"
                                (case
                                 "FFS.sum
           (singleton(emptyset),
            LAMBDA B:
              (-1) ^ (card(B)) *
               M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                           ...)))")
                                (("1"
                                  (replace -1 * rl t)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (lemma
                                       "sum_eq_doms"
                                       ("A"
                                        "{y: finite_set[finite_set[T]] |
             emptyset[finite_set[T]] /= y AND
              member[finite_set[finite_set[T]]](y, powerset(A!1))}"
                                        "B"
                                        "{y: set[finite_set[T]] |
              emptyset[finite_set[T]] /= y AND member(y, powerset(A!1))}"
                                        "f"
                                        "LAMBDA B:
             (-1) ^ (card(B)) *
              M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                                   (B)))
                 (t!1)"))
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "remove")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality
                                             1
                                             :hide?
                                             t)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (hide - 2)
                                              (("2"
                                                (skolem-typepred)
                                                (("2"
                                                  (lemma
                                                   "finite_universe")
                                                  (("2"
                                                    (lemma
                                                     "finite_subset[finite_set[T]]")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "powerset(fullset[T])"
                                                       "x!1")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (expand
                                                             "subset?")
                                                            (("1"
                                                              (skolem-typepred)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "restrict")
                                                        (("2"
                                                          (lemma
                                                           "powerset_finite2[T]")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "fullset[T]")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -3
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "is_finite")
                                                                  (("1"
                                                                    (skolem-typepred)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (expand
                                                                           "injective?")
                                                                          (("1"
                                                                            (skolem-typepred)
                                                                            (("1"
                                                                              (inst?)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skolem-typepred)
                                                                          (("2"
                                                                            (ground)
                                                                            (("2"
                                                                              (lemma
                                                                               "powerset_finite2[T]")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -
                                                                                   2)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "finite_universe")
                                                                                    (("2"
                                                                                      (expand*
                                                                                       "is_finite_type"
                                                                                       "is_finite")
                                                                                      (("2"
                                                                                        (skolem-typepred)
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "injective?")
                                                                                              (("1"
                                                                                                (skolem-typepred)
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               -)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               2
                                                               3)
                                                              (("2"
                                                                (expand*
                                                                 "is_finite_type"
                                                                 "is_finite"
                                                                 "fullset")
                                                                (("2"
                                                                  (skolem-typepred)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("1"
                                                                        (expand
                                                                         "injective?")
                                                                        (("1"
                                                                          (skolem-typepred)
                                                                          (("1"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma
                                           "finite_subset[finite_set[finite_set[T]]]"
                                           ("s"
                                            "{y: set[finite_set[T]] |
              emptyset[finite_set[T]] /= y AND
               member[set[finite_set[T]]](y, powerset[finite_set[T]](A!1))}"
                                            "A"
                                            "powerset(A!1)"))
                                          (("1"
                                            (ground)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (expand "is_finite")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide - 2 3)
                                              (("2"
                                                (expand "subset?")
                                                (("2"
                                                  (skolem-typepred)
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide - 2 3)
                                            (("2"
                                              (skolem-typepred)
                                              (("2"
                                                (lemma
                                                 "finite_universe")
                                                (("2"
                                                  (lemma
                                                   "finite_subset[finite_set[T]]"
                                                   ("s"
                                                    "x!1"
                                                    "A"
                                                    "powerset(fullset[T])"))
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand
                                                       "subset?")
                                                      (("1"
                                                        (skolem-typepred)
                                                        (("1"
                                                          (expand
                                                           "member")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "restrict")
                                                              (("1"
                                                                (expand
                                                                 "powerset")
                                                                (("1"
                                                                  (expand
                                                                   "subset?")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (lemma
                                                       "powerset_finite2[T]")
                                                      (("2"
                                                        (inst?)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (hide
                                                             -1
                                                             -3)
                                                            (("1"
                                                              (expand
                                                               "is_finite")
                                                              (("1"
                                                                (skolem-typepred)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (expand
                                                                       "injective?")
                                                                      (("1"
                                                                        (skolem-typepred)
                                                                        (("1"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skolem-typepred)
                                                                      (("2"
                                                                        (ground)
                                                                        (("1"
                                                                          (reveal
                                                                           -2)
                                                                          (("1"
                                                                            (lemma
                                                                             "finite_subset"
                                                                             ("s"
                                                                              "x!2"
                                                                              "A"
                                                                              "fullset[T]"))
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "is_finite")
                                                                              (("2"
                                                                                (expand
                                                                                 "is_finite_type")
                                                                                (("2"
                                                                                  (skolem-typepred)
                                                                                  (("2"
                                                                                    (inst
                                                                                     1
                                                                                     "N!2"
                                                                                     "g!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "injective?")
                                                                                      (("2"
                                                                                        (skolem-typepred)
                                                                                        (("2"
                                                                                          (ground)
                                                                                          (("2"
                                                                                            (inst?
                                                                                             -5)
                                                                                            (("2"
                                                                                              (ground)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "restrict")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide - 2 3)
                                        (("3"
                                          (lemma "finite_universe")
                                          (("3"
                                            (lemma
                                             "powerset_finite2[finite_set[T]]"
                                             ("A" "A!1"))
                                            (("3"
                                              (lemma
                                               "finite_subset[finite_set[finite_set[T]]]"
                                               ("s"
                                                "{y: finite_set[finite_set[T]] |
              emptyset[finite_set[T]] /= y AND
               member[finite_set[finite_set[T]]]
                   (y, powerset[finite_set[T]](A!1))}"
                                                "A"
                                                "powerset(A!1)"))
                                              (("3"
                                                (ground)
                                                (("1" (grind) nil nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (hide - 2 3)
                                        (("4"
                                          (lemma
                                           "powerset_finite2[finite_set[T]]")
                                          (("4"
                                            (ground)
                                            (("4"
                                              (inst
                                               -1
                                               "powerset(fullset[T])")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (skolem-typepred)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (expand
                                                           "powerset")
                                                          (("1"
                                                            (expand
                                                             "subset?")
                                                            (("1"
                                                              (skolem-typepred)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "restrict")
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma
                                                     "powerset_finite2[T]"
                                                     ("A"
                                                      "fullset[T]"))
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (expand
                                                           "is_finite")
                                                          (("1"
                                                            (skolem-typepred)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (expand
                                                                   "injective?")
                                                                  (("1"
                                                                    (skolem-typepred)
                                                                    (("1"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skolem-typepred)
                                                                  (("2"
                                                                    (ground)
                                                                    (("2"
                                                                      (lemma
                                                                       "finite_subset[T]")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "fullset[T]"
                                                                         "x!1")
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (hide
                                                                             -2
                                                                             -3
                                                                             2)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -1
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "is_finite")
                                                                            (("2"
                                                                              (hide
                                                                               -)
                                                                              (("2"
                                                                                (lemma
                                                                                 "finite_universe")
                                                                                (("2"
                                                                                  (expand
                                                                                   "is_finite_type")
                                                                                  (("2"
                                                                                    (skosimp)
                                                                                    (("2"
                                                                                      (inst
                                                                                       1
                                                                                       "N!2"
                                                                                       "g!1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "injective?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "restrict")
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (lemma
                                                         "finite_universe")
                                                        (("2"
                                                          (expand*
                                                           "is_finite_type"
                                                           "is_finite")
                                                          (("2"
                                                            (skolem-typepred)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (inst?)
                                                                (("1"
                                                                  (expand
                                                                   "injective?")
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (hide -1 -3 -5)
                                    (("2"
                                      (lemma
                                       "sum_singleton_rew[finite_set[finite_set[T]]]")
                                      (("2"
                                        (inst
                                         -1
                                         "singleton(emptyset[finite_set[T]])"
                                         "LAMBDA B:
            (-1) ^ (card(B)) *
             M_D(Intersection(extend[setof[T], finite_set[T], bool, FALSE]
                                  (B)))
                (t!1)"
                                         "emptyset[finite_set[T]]")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (hide - 2 3)
                                            (("1"
                                              (rewrite "card_def")
                                              (("1"
                                                (rewrite
                                                 "Card_bijection")
                                                (("1"
                                                  (inst
                                                   1
                                                   "lambda (y : (singleton(emptyset[finite_set[T]]))) : 0")
                                                  (("1"
                                                    (expand
                                                     "bijective?")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (expand
                                                         "injective?")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (skolem-typepred)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "emptyset[finite_set[T]]")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide - 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2 3 -)
                              (("2"
                                (expand "member")
                                (("2"
                                  (expand "powerset")
                                  (("2"
                                    (expand "subset?")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (hide 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (sum_eq_funs formula-decl nil finite_sets_sum_real finite_sets)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (sum_remove formula-decl nil finite_sets_sum finite_sets)
    (sum_singleton_rew formula-decl nil finite_sets_sum_real
     finite_sets)
    (card_def formula-decl nil finite_sets nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (Card_bijection formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sum_eq_doms formula-decl nil finite_sum_aux2 nil)
    (finite_universe formula-decl nil p96 nil)
    (fullset const-decl "set" sets nil)
    (injective? const-decl "bool" functions nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil nat_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (sum_distributive formula-decl nil finite_sets_sum finite_sets)
    (sum def-decl "R" finite_sets_sum finite_sets)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (< const-decl "bool" reals nil) (nbit type-eq-decl nil bit nil)
    (M_D const-decl "[T -> nbit]" M_D_aux nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (Intersection const-decl "set" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (remove const-decl "set" sets nil)
    (powerset const-decl "setofsets" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (powerset_finite application-judgement "finite_set[set[T]]"
     finite_sets_of_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil p96 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (e15_22_6a 0
  (e15_22_6a-1 nil 3887742054
   ("" (skolem-typepred)
    (("" (ground)
      (("" (lemma "sum_swap[T, finite_set[finite_set[T]]]")
        ((""
          (inst -1 "D!1" "remove(emptyset, powerset(A!1))"
           "lambda x: lambda B: (-1) ^ (card(B)) * M_D(Intersection(B))(x)")
          (("" (replace -1 * lr t)
            ((""
              (lemma "sum_eq_funs[finite_set[finite_set[T]]]"
               ("S" "remove(emptyset, powerset(A!1))" "f"
                "LAMBDA (y: finite_set[finite_set[T]]):
            sum(D!1,
                LAMBDA (x_1: T):
                  (-1) ^ (card(y)) *
                   M_D(Intersection(y))
                      (x_1))" "g" "LAMBDA B:
             (-1) ^ (card(B)) *
              sum(D!1,
                  LAMBDA x:
                    M_D(Intersection(B))
                       (x))"))
              (("" (ground)
                (("" (skolem-typepred)
                  ((""
                    (lemma "sum_mult"
                     ("S" "D!1" "c" "(-1) ^ (card(t!1))" "f" "LAMBDA x:
              M_D(Intersection(t!1))
                 (x)"))
                    (("" (replace -1 * lr t) (("" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "int" p96 nil)
    (nil application-judgement "int" p96 nil)
    (finite_remove application-judgement
     "finite_set[set[finite_set[T]]]" p96 nil)
    (finite_remove application-judgement
     "finite_set[finite_set[finite_set[T]]]" p96 nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[finite_set[T]]" p96
     nil)
    (powerset_finite application-judgement "finite_set[set[T]]"
     finite_sets_of_sets nil)
    (powerset_finite3 application-judgement
     "non_empty_finite_set[finite_set[finite_set[T]]]" p96 nil)
    (nonempty_powerset application-judgement
     "(nonempty?[set[finite_set[T]]])" p96 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nil application-judgement "nat" p96 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (setof type-eq-decl nil defined_types nil)
    (remove const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (setofsets type-eq-decl nil sets nil)
    (powerset const-decl "setofsets" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (< const-decl "bool" reals nil) (nbit type-eq-decl nil bit nil)
    (M_D const-decl "[T -> nbit]" M_D_aux nil)
    (Intersection const-decl "set" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sum_eq_funs formula-decl nil finite_sets_sum_real finite_sets)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum def-decl "R" finite_sets_sum finite_sets)
    (sum_mult formula-decl nil finite_sets_sum_real finite_sets)
    (sum_swap formula-decl nil finite_sum_aux nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil p96 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (e15_22_6b 0
  (e15_22_6b-1 nil 3887744118
   ("" (skolem-typepred)
    (("" (ground)
      ((""
        (lemma "sum_eq_funs"
         ("S" "D!1" "f" "LAMBDA x:
            sum(singleton(emptyset),
                LAMBDA B:
                  (-1) ^ (card(B)) *
                   M_D(Intersection(B))(x))" "g" "lambda x: 1"))
        (("" (ground)
          (("1" (replace -1 * lr)
            (("1" (use "sum_1_is_card[T]") nil nil)) nil)
           ("2" (hide 3)
            (("2" (skolem-typepred)
              (("2"
                (use "sum_singleton_rew[finite_set[finite_set[T]]]")
                (("2" (ground)
                  (("1" (replace -1 * lr t)
                    (("1"
                      (lemma "Intersection_empty_full[finite_set[T]]")
                      (("1" (lemma "card_emptyset[finite_set[T]]")
                        (("1" (replace -1 * lr t)
                          (("1" (ground)
                            (("1" (lemma "expt_x0_aux")
                              (("1"
                                (inst -1 "-1")
                                (("1"
                                  (expand "^")
                                  (("1"
                                    (replace -1 * lr t)
                                    (("1"
                                      (expand "M_D")
                                      (("1"
                                        (expand "b2n")
                                        (("1"
                                          (expand "o")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (expand "full?")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide - 2 3)
                    (("2" (rewrite "card_def")
                      (("2" (rewrite "Card_bijection")
                        (("2" (expand "bijective?")
                          (("2"
                            (inst 1
                             "lambda (y : (singleton(emptyset[finite_set[T]]))) : 0")
                            (("2" (ground)
                              (("1" (grind) nil nil)
                               ("2"
                                (expand "surjective?")
                                (("2"
                                  (skolem-typepred)
                                  (("2"
                                    (inst 1 "emptyset[finite_set[T]]")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "int" p96 nil)
    (nil application-judgement "int" p96 nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nil application-judgement "posnat" p96 nil)
    (sum_1_is_card formula-decl nil finite_sets_sum_real finite_sets)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" p96 nil)
    (Intersection_empty_full formula-decl nil sets_lemmas nil)
    (expt_x0_aux formula-decl nil exponentiation nil)
    (O const-decl "T3" function_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (injective? const-decl "bool" functions nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (full? const-decl "bool" sets nil) (b2n const-decl "nbit" bit nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (finite_emptyset name-judgement "finite_set[set[finite_set[T]]]"
     p96 nil)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[finite_set[T]], set[finite_set[T]]])" p96
     nil)
    (card_emptyset formula-decl nil finite_sets nil)
    (card_def formula-decl nil finite_sets nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (Card_bijection formula-decl nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set[finite_set[T]]" p96
     nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (sum_singleton_rew formula-decl nil finite_sets_sum_real
     finite_sets)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[set[finite_set[T]]]" p96 nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[finite_set[finite_set[T]]]" p96 nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sum_eq_funs formula-decl nil finite_sets_sum_real finite_sets)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum def-decl "R" finite_sets_sum finite_sets)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (< const-decl "bool" reals nil) (nbit type-eq-decl nil bit nil)
    (M_D const-decl "[T -> nbit]" M_D_aux nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (Intersection const-decl "set" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil p96 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (e15_22_7 0
  (e15_22_7-1 nil 3887750800
   ("" (skolem-typepred)
    (("" (ground)
      (("" (lemma "e15_22_4" ("A" "A!1" "D" "D!1"))
        (("" (ground)
          (("" (replace -1 * lr t)
            (("" (lemma "e15_22_5" ("A" "A!1" "D" "D!1"))
              (("" (ground)
                (("" (replace -1 * lr t)
                  (("" (lemma "e15_22_6a" ("A" "A!1" "D" "D!1"))
                    (("" (ground)
                      (("" (replace -1 * lr t)
                        (("" (lemma "e15_22_6b" ("A" "A!1" "D" "D!1"))
                          (("" (ground)
                            (("" (replace -1 * lr t)
                              ((""
                                (lemma
                                 "sum_eq_funs[finite_set[finite_set[T]]]"
                                 ("S"
                                  "remove(emptyset, powerset(A!1))"
                                  "f"
                                  "LAMBDA B:
             (-1) ^ (card(B)) *
              sum(D!1,
                  LAMBDA x:
                    M_D(Intersection(B))(x))"
                                  "g"
                                  "LAMBDA B:
             (-1) * (-1) ^ (1 + card(B)) *
              sum(D!1,
                  LAMBDA x:
                    M_D(Intersection(B))(x))"))
                                ((""
                                  (ground)
                                  (("1"
                                    (replace -1 * lr t)
                                    (("1"
                                      (lemma
                                       "sum_mult[finite_set[finite_set[T]]]"
                                       ("S"
                                        "remove(emptyset, powerset(A!1))"
                                        "c"
                                        "-1"
                                        "f"
                                        "LAMBDA B:
             (-1) ^ (1 + card(B)) *
              sum(D!1,
                  LAMBDA x:
                    M_D(Intersection(B))(x))"))
                                      (("1"
                                        (replace -1 * lr t)
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 3)
                                    (("2"
                                      (skolem-typepred)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "int" p96 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "int" p96 nil)
    (finite_remove application-judgement
     "finite_set[set[finite_set[T]]]" p96 nil)
    (finite_remove application-judgement
     "finite_set[finite_set[finite_set[T]]]" p96 nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[finite_set[T]]" p96
     nil)
    (powerset_finite application-judgement "finite_set[set[T]]"
     finite_sets_of_sets nil)
    (powerset_finite3 application-judgement
     "non_empty_finite_set[finite_set[finite_set[T]]]" p96 nil)
    (nonempty_powerset application-judgement
     "(nonempty?[set[finite_set[T]]])" p96 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "nat" p96 nil)
    (e15_22_5 formula-decl nil p96 nil)
    (e15_22_6b formula-decl nil p96 nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (sum_mult formula-decl nil finite_sets_sum_real finite_sets)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (injective? const-decl "bool" functions nil)
    (rest const-decl "set" sets nil)
    (O const-decl "T3" function_props nil)
    (b2n const-decl "nbit" bit nil)
    (expt def-decl "real" exponentiation nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_is_partial_order name-judgement
     "(partial_order?[set[finite_set[T]]])" p96 nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (finite_rest application-judgement "finite_set[T]" p96 nil)
    (finite_remove application-judgement "finite_set[T]" p96 nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sum_eq_funs formula-decl nil finite_sets_sum_real finite_sets)
    (setof type-eq-decl nil defined_types nil)
    (remove const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (setofsets type-eq-decl nil sets nil)
    (powerset const-decl "setofsets" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum def-decl "R" finite_sets_sum finite_sets)
    (< const-decl "bool" reals nil) (nbit type-eq-decl nil bit nil)
    (M_D const-decl "[T -> nbit]" M_D_aux nil)
    (Intersection const-decl "set" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (e15_22_6a formula-decl nil p96 nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (e15_22_4 formula-decl nil p96 nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil p96 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (inclusion_exclusion 0
  (inclusion_exclusion-2 "" 3887757471
   ("" (skolem-typepred)
    (("" (ground)
      (("" (lemma "e15_22_1" ("A" "A!1" "D" "D!1"))
        (("" (ground)
          (("" (replace -1 * lr t)
            (("" (lemma "e15_22_2" ("A" "A!1" "D" "D!1"))
              (("" (ground)
                (("" (replace -1 * lr t)
                  ((""
                    (lemma "sum_eq_funs"
                     ("S" "D!1" "f"
                      "LAMBDA x: 1 - product(A!1, LAMBDA a: neg_M_D(a)(x))"
                      "g" "LAMBDA x: 1 - FFS.sum(powerset(A!1),
                   LAMBDA B: (-1) ^ (card(B)) * product(B, LAMBDA a: M_D(a)(x)))"))
                    (("" (ground)
                      (("1" (replace -1 * lr t)
                        (("1"
                          (lemma "sum_eq_funs"
                           ("S" "D!1" "f" "LAMBDA x:
                 1 -
                  FFS.sum(powerset(A!1),
                      LAMBDA B:
                        (-1) ^ (card(B)) * product(B, LAMBDA a: M_D(a)(x)))"
                            "g" "LAMBDA x:
                 1 -
                  FFS.sum(powerset(A!1),
                      LAMBDA B:
                        (-1) ^ (card(B)) * M_D(Intersection(B))(x))"))
                          (("1" (ground)
                            (("1" (replace -1 * lr t)
                              (("1"
                                (lemma
                                 "e15_22_7"
                                 ("A" "A!1" "D" "D!1"))
                                (("1"
                                  (ground)
                                  (("1"
                                    (expand "altcard")
                                    (("1"
                                      (replace -1 * lr t)
                                      (("1"
                                        (lemma
                                         "sum_eq_funs[finite_set[finite_set[T]]]"
                                         ("S"
                                          "remove(emptyset, powerset(A!1))"
                                          "f"
                                          "LAMBDA B:
            (-1) ^ (1 + card(B)) *
             sum(D!1,
                 LAMBDA x:
                   M_D(Intersection(B))(x))"
                                          "g"
                                          "LAMBDA (B) -> int:
             ((-1) ^ (1 + card(B))) * card(Intersection(B))"))
                                        (("1"
                                          (ground)
                                          (("1"
                                            (hide 3)
                                            (("1"
                                              (skolem-typepred)
                                              (("1"
                                                (hide -2 -3)
                                                (("1"
                                                  (case-replace
                                                   "sum(D!1, LAMBDA x: M_D(Intersection(t!1))(x)) = card(Intersection(t!1))")
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (lemma
                                                       "M_D_sum"
                                                       ("a"
                                                        "Intersection(t!1)"
                                                        "D"
                                                        "D!1"))
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           *
                                                           lr
                                                           t)
                                                          (("1"
                                                            (lemma
                                                             "sum_eq_funs"
                                                             ("S"
                                                              "D!1"
                                                              "f"
                                                              "LAMBDA x: M_D(Intersection(t!1))(x)"
                                                              "g"
                                                              "M_D(Intersection(t!1))"))
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand
                                                             "subset?")
                                                            (("2"
                                                              (skolem-typepred)
                                                              (("2"
                                                                (ground)
                                                                (("2"
                                                                  (expand
                                                                   "Intersection")
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "choose(t!1)")
                                                                      (("1"
                                                                        (inst
                                                                         -3
                                                                         "choose(t!1)")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "remove")
                                                                        (("3"
                                                                          (hide
                                                                           -2
                                                                           2
                                                                           3)
                                                                          (("3"
                                                                            (expand
                                                                             "nonempty?")
                                                                            (("3"
                                                                              (ground)
                                                                              (("3"
                                                                                (hide
                                                                                 -2)
                                                                                (("3"
                                                                                  (expand
                                                                                   "empty?")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "emptyset")
                                                                                    (("3"
                                                                                      (apply-extensionality
                                                                                       1
                                                                                       :hide?
                                                                                       t)
                                                                                      (("3"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide - 2 3)
                                          (("2"
                                            (skolem-typepred)
                                            (("2"
                                              (lemma "finite_universe")
                                              (("2"
                                                (lemma
                                                 "finite_subset[T]")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "fullset[T]"
                                                   "Intersection[T]
               (extend[setof[T], finite_set[T], bool, FALSE](B!1))")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (expand
                                                         "subset?")
                                                        (("1"
                                                          (skolem-typepred)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "is_finite_type")
                                                    (("2"
                                                      (hide
                                                       -2
                                                       -3
                                                       -4
                                                       -5
                                                       2
                                                       3)
                                                      (("2"
                                                        (expand
                                                         "is_finite")
                                                        (("2"
                                                          (skolem-typepred)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "N!1"
                                                             "g!1")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2"
                                (skolem-typepred)
                                (("2"
                                  (lemma
                                   "e15_22_3b"
                                   ("A" "A!1" "D" "D!1" "x" "t!1"))
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skolem-typepred)
                        (("2"
                          (lemma "e15_22_3"
                           ("A" "A!1" "D" "D!1" "x" "t!1"))
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" p96 nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (nil application-judgement "int" p96 nil)
    (finite_remove application-judgement
     "finite_set[set[finite_set[T]]]" p96 nil)
    (finite_remove application-judgement
     "finite_set[finite_set[finite_set[T]]]" p96 nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[finite_set[T]]" p96
     nil)
    (powerset_finite application-judgement "finite_set[set[T]]"
     finite_sets_of_sets nil)
    (powerset_finite3 application-judgement
     "non_empty_finite_set[finite_set[finite_set[T]]]" p96 nil)
    (nonempty_powerset application-judgement
     "(nonempty?[set[finite_set[T]]])" p96 nil)
    (nil application-judgement "nat" p96 nil)
    (e15_22_2 formula-decl nil p96 nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (Intersection const-decl "set" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (e15_22_3b formula-decl nil p96 nil)
    (finite_universe formula-decl nil p96 nil)
    (fullset const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (finite_subset formula-decl nil finite_sets nil)
    (M_D_sum formula-decl nil M_D_aux nil)
    (nonempty? const-decl "bool" sets nil)
    (A!1 skolem-const-decl "finite_set[finite_set[T]]" p96 nil)
    (t!1 skolem-const-decl "(remove(emptyset, powerset(A!1)))" p96 nil)
    (choose const-decl "(p)" sets nil)
    (subset_is_partial_order name-judgement
     "(partial_order?[set[finite_set[T]]])" p96 nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" p96 nil)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     p96 nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (emptyset const-decl "set" sets nil)
    (remove const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (altcard const-decl "int" p96 nil)
    (e15_22_7 formula-decl nil p96 nil)
    (e15_22_3 formula-decl nil p96 nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sum_eq_funs formula-decl nil finite_sets_sum_real finite_sets)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (product def-decl "R" finite_sets_product finite_sets)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (nbit type-eq-decl nil bit nil)
    (neg_M_D const-decl "[T -> nbit]" M_D_aux nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum def-decl "R" finite_sets_sum finite_sets)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (powerset const-decl "setofsets" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (M_D const-decl "[T -> nbit]" M_D_aux nil)
    (product_nat application-judgement "nat" p96 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "int" p96 nil)
    (e15_22_1 formula-decl nil p96 nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil p96 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK)))

