(gcd2
 (gcd_eq 0
  (gcd_eq-1 nil 3844120838
   ("" (grind)
    (("" (lemma "gcd_dvd1")
      (("" (inst?)
        (("" (lemma "gcd_greatest")
          (("" (inst?)
            (("" (inst -1 "x!1")
              (("" (prop)
                (("1" (lemma "mutual_divisors_nat")
                  (("1" (inst?) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (lemma "divides_reflexive")
                  (("2" (grind) nil nil)) nil)
                 ("3" (lemma "divides_reflexive")
                  (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gcd_dvd1 formula-decl nil gcd2 nil)
    (gcd_greatest formula-decl nil gcd2 nil)
    (divides_reflexive formula-decl nil divides nil)
    (divides const-decl "bool" divides nil)
    (mutual_divisors_nat formula-decl nil divides nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (gcd const-decl "posnat" gcd2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak))
 (gcd_sym 0
  (gcd_sym-1 nil 3844121516
   ("" (skosimp)
    (("" (lemma "mutual_divisors_nat")
      (("" (inst?)
        (("" (lemma "gcd_dvd1")
          (("" (lemma "gcd_dvd2")
            (("" (lemma "gcd_greatest")
              (("" (prop)
                (("1" (delete 2)
                  (("1" (inst -3 "x!1" "y!1")
                    (("1" (inst -2 "x!1" "y!1")
                      (("1" (inst -1 "y!1" "x!1" "gcd(x!1, y!1)")
                        (("1" (prop) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (delete 2)
                  (("2" (inst -1 "x!1" "y!1" "gcd(y!1, x!1)")
                    (("2" (inst -2 "y!1" "x!1")
                      (("2" (inst -3 "y!1" "x!1")
                        (("2" (prop) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mutual_divisors_nat formula-decl nil divides nil)
    (gcd_dvd1 formula-decl nil gcd2 nil)
    (gcd_greatest formula-decl nil gcd2 nil)
    (gcd_dvd2 formula-decl nil gcd2 nil)
    (gcd const-decl "posnat" gcd2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (gcd_stp_TCC1 0
  (gcd_stp_TCC1-1 nil 3844120830 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (gcd_stp subtype "(number_fields.-)(gcd2.x, gcd2.y)" "posnat")))
 (gcd_stp 0
  (gcd_stp-1 nil 3844122421
   ("" (skosimp)
    (("" (lemma "mutual_divisors_nat")
      (("" (lemma "gcd_greatest")
        (("" (lemma "gcd_dvd2")
          (("" (lemma "gcd_dvd1")
            (("" (lemma "divides_diff")
              (("" (inst -5 "gcd(x!1, y!1)" "gcd(x!1 - y!1, y!1)")
                (("1" (prop)
                  (("1" (delete 2)
                    (("1" (inst -4 "x!1 - y!1" "y!1" "gcd(x!1, y!1)")
                      (("1" (prop)
                        (("1" (inst -3 "x!1" "y!1") nil nil)
                         ("2" (inst -3 "x!1" "y!1")
                          (("2" (inst -2 "x!1" "y!1")
                            (("2" (inst -1 "y!1" "x!1" "gcd(x!1, y!1)")
                              (("2" (prop) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (delete -1 -2 -3 2) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -4 "x!1" "y!1" "gcd(x!1 - y!1, y!1)")
                    (("1" (delete 2)
                      (("1" (inst -3 "x!1 - y!1" "y!1")
                        (("1" (inst -2 "x!1 - y!1" "y!1")
                          (("1" (lemma "divides_sum")
                            (("1"
                              (inst -1 "y!1" "x!1 - y!1"
                               "gcd(x!1 - y!1, y!1)")
                              (("1" (grind) nil nil)
                               ("2"
                                (delete -1 -2 -3 -4 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (delete -1 -2 -3 2)
                            (("2" (grind) nil nil)) nil))
                          nil)
                         ("2" (delete -1 -2 -3 2)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (delete -1 -2 -3 2 3) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (delete -1 -2 -3 -4 2) (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mutual_divisors_nat formula-decl nil divides nil)
    (gcd_dvd2 formula-decl nil gcd2 nil)
    (divides_diff formula-decl nil divides nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (divides const-decl "bool" divides nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (divides_sum formula-decl nil divides nil)
    (gcd const-decl "posnat" gcd2 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (x!1 skolem-const-decl "posnat" gcd2 nil)
    (y!1 skolem-const-decl "posnat" gcd2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gcd_dvd1 formula-decl nil gcd2 nil)
    (gcd_greatest formula-decl nil gcd2 nil))
   shostak))
 (gcd_stp2_TCC1 0
  (gcd_stp2_TCC1-1 nil 3844124987 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (gcd_stp2 subtype "(number_fields.-)(gcd2.y, gcd2.x)" "posnat")))
 (gcd_stp2 0
  (gcd_stp2-1 nil 3844124988
   ("" (lemma "gcd_sym")
    (("" (lemma "gcd_stp")
      (("" (skosimp)
        (("" (inst -1 "y!1" "x!1")
          (("" (inst-cp -2 "y!1" "x!1")
            (("" (inst -2 "y!1 - x!1" "x!1")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gcd_stp formula-decl nil gcd2 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (x!1 skolem-const-decl "posnat" gcd2 nil)
    (y!1 skolem-const-decl "posnat" gcd2 nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gcd_sym formula-decl nil gcd2 nil))
   shostak))
 (gcd_leq 0
  (gcd_leq-1 nil 3844124106
   ("" (lemma "divisor_smaller")
    (("" (lemma "gcd_dvd1")
      (("" (skosimp)
        (("" (inst? -1) (("" (inst? -2) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((gcd_dvd1 formula-decl nil gcd2 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (divides const-decl "bool" divides nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gcd const-decl "posnat" gcd2 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (divisor_smaller formula-decl nil divides nil))
   shostak))
 (gcd2_TCC1 0
  (gcd2_TCC1-1 nil 3844124671 ("" (termination-tcc) nil nil) nil nil
   (gcd2 termination
    "gcd2.gcd2((number_fields.-)(gcd2.x, gcd2.y), gcd2.y)" "nil")))
 (gcd2_TCC2 0
  (gcd2_TCC2-1 nil 3844124671 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (gcd2 subtype "(number_fields.-)(gcd2.y, gcd2.x)" "posnat")))
 (gcd2_TCC3 0
  (gcd2_TCC3-1 nil 3844124671 ("" (termination-tcc) nil nil) nil nil
   (gcd2 termination
    "gcd2.gcd2(gcd2.x, (number_fields.-)(gcd2.y, gcd2.x))" "nil")))
 (gcd2_TCC4 0
  (gcd2_TCC4-1 nil 3844200031 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (gcd2 disjointness "TABLE
  %-------------------------+------------------------------------------------------++
  | gcd2.x = gcd2.y         | gcd2.x                                               ||
  %-------------------------+------------------------------------------------------++
  | reals.>(gcd2.x, gcd2.y) | gcd2.gcd2((number_fields.-)(gcd2.x, gcd2.y), gcd2.y) ||
  %-------------------------+------------------------------------------------------++
  | else                    | gcd2.gcd2(gcd2.x, (number_fields.-)(gcd2.y, gcd2.x)) ||
  %-------------------------+------------------------------------------------------++
ENDTABLE" "nil")))
 (gcd2_h1 0
  (gcd2_h1-1 nil 3844125472
   ("" (skosimp)
    (("" (expand "gcd2" 1)
      (("" (replace -2 1 LR)
        (("" (replace -1 * LR)
          (("" (delete -2)
            (("" (grind)
              (("" (lemma "gcd_stp")
                (("" (inst -1 "x!1" "y!1") (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gcd2 def-decl "posnat" gcd2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (gcd_stp formula-decl nil gcd2 nil))
   shostak))
 (gcd2_h2 0
  (gcd2_h2-1 nil 3844125782
   ("" (skosimp)
    (("" (lemma "gcd_stp2")
      (("" (expand "gcd2" 1)
        (("" (inst -1 "x!1" "y!1")
          (("" (replace -3 1 LR)
            (("" (delete -3) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((gcd_stp2 formula-decl nil gcd2 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gcd2 def-decl "posnat" gcd2 nil))
   shostak))
 (gcd2_eq_gcd 0
  (gcd2_eq_gcd-1 nil 3844124673
   ("" (measure-induct+ "x+y" ("x" "y"))
    (("" (expand "gcd2" 1)
      (("" (lemma "gcd_eq")
        (("" (lemma "gcd2_h1")
          (("" (lemma "gcd2_h2")
            (("" (inst -1 "x!1" "x!2")
              (("" (inst -2 "x!1" "x!2")
                (("" (inst -3 "x!1")
                  (("" (case "x!1 = x!2")
                    (("1" (assert) nil nil)
                     ("2" (case "x!1 < x!2")
                      (("1" (assert)
                        (("1" (inst -5 "x!1" "x!2 - x!1")
                          (("1" (assert)
                            (("1" (replace -5 * LR)
                              (("1"
                                (lemma "gcd_stp2")
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "gcd_stp")
                        (("2" (inst -5 "x!1 - x!2" "x!2")
                          (("1" (assert)
                            (("1" (prop)
                              (("1"
                                (replace -5 * LR)
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil)
                               ("3" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (gcd const-decl "posnat" gcd2 nil)
    (gcd2 def-decl "posnat" gcd2 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (gcd_eq formula-decl nil gcd2 nil)
    (gcd2_h2 formula-decl nil gcd2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gcd_stp formula-decl nil gcd2 nil)
    (x!2 skolem-const-decl "posnat" gcd2 nil)
    (x!1 skolem-const-decl "posnat" gcd2 nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (gcd_stp2 formula-decl nil gcd2 nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gcd2_h1 formula-decl nil gcd2 nil))
   shostak)))

